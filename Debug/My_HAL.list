
My_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005ec  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000794  0800079c  0001079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000794  08000794  0001079c  2**0
                  CONTENTS
  4 .ARM          00000000  08000794  08000794  0001079c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000794  0800079c  0001079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000794  08000794  00010794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000798  08000798  00010798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800079c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800079c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001079c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010f8  00000000  00000000  000107cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d7  00000000  00000000  000118c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  00011ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00011d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000466  00000000  00000000  00011e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c9e  00000000  00000000  0001229e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fd2  00000000  00000000  00012f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009bf0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002cc  00000000  00000000  0009bf64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800077c 	.word	0x0800077c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800077c 	.word	0x0800077c

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4907      	ldr	r1, [pc, #28]	; (8000220 <__NVIC_EnableIRQ+0x38>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100

08000224 <hal_gpio_configure_pin_mode>:
 * @param	mode			: mode to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_mode(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t mode) {
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	460b      	mov	r3, r1
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	817b      	strh	r3, [r7, #10]
	GPIOx->MODER &= (0x03 << (2 * pin_no));
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	897a      	ldrh	r2, [r7, #10]
 8000238:	0052      	lsls	r2, r2, #1
 800023a:	2103      	movs	r1, #3
 800023c:	fa01 f202 	lsl.w	r2, r1, r2
 8000240:	401a      	ands	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << (2 * pin_no));
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	897b      	ldrh	r3, [r7, #10]
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	6879      	ldr	r1, [r7, #4]
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	431a      	orrs	r2, r3
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	601a      	str	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	3714      	adds	r7, #20
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr

08000266 <hal_gpio_configure_pin_otype>:
 * @param	op_type			: output type to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_otype(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t op_type) {
 8000266:	b480      	push	{r7}
 8000268:	b085      	sub	sp, #20
 800026a:	af00      	add	r7, sp, #0
 800026c:	60f8      	str	r0, [r7, #12]
 800026e:	460b      	mov	r3, r1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	817b      	strh	r3, [r7, #10]
	GPIOx->OTYPER |= (op_type << (pin_no));
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	897b      	ldrh	r3, [r7, #10]
 800027a:	6879      	ldr	r1, [r7, #4]
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	431a      	orrs	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	605a      	str	r2, [r3, #4]
}
 8000286:	bf00      	nop
 8000288:	3714      	adds	r7, #20
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <hal_gpio_configure_pin_speed>:
 * @param	speed			: speed to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_speed(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t speed) {
 8000292:	b480      	push	{r7}
 8000294:	b085      	sub	sp, #20
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	460b      	mov	r3, r1
 800029c:	607a      	str	r2, [r7, #4]
 800029e:	817b      	strh	r3, [r7, #10]
	GPIOx->OSPEEDR |= (speed << (2 * pin_no));
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	689a      	ldr	r2, [r3, #8]
 80002a4:	897b      	ldrh	r3, [r7, #10]
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	6879      	ldr	r1, [r7, #4]
 80002aa:	fa01 f303 	lsl.w	r3, r1, r3
 80002ae:	431a      	orrs	r2, r3
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	609a      	str	r2, [r3, #8]
}
 80002b4:	bf00      	nop
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <hal_gpio_configure_pin_resistor>:
 * @param	resistor		: pull up, push down, nothing
 * @retval	void
 */

static void hal_gpio_configure_pin_resistor(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t resistor) {
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	460b      	mov	r3, r1
 80002ca:	607a      	str	r2, [r7, #4]
 80002cc:	817b      	strh	r3, [r7, #10]
	GPIOx->PUPDR |= (resistor << (2 * pin_no));
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	68da      	ldr	r2, [r3, #12]
 80002d2:	897b      	ldrh	r3, [r7, #10]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	6879      	ldr	r1, [r7, #4]
 80002d8:	fa01 f303 	lsl.w	r3, r1, r3
 80002dc:	431a      	orrs	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	60da      	str	r2, [r3, #12]
}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr

080002ee <hal_gpio_set_alt_function>:
 * @param	pin_no			: GPIO pin number
 * @param	alt_fun_value	: alternate function to be configured
 * @retval	void
 */
void hal_gpio_set_alt_function(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint16_t alt_fun_value) {
 80002ee:	b480      	push	{r7}
 80002f0:	b083      	sub	sp, #12
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	807b      	strh	r3, [r7, #2]
 80002fa:	4613      	mov	r3, r2
 80002fc:	803b      	strh	r3, [r7, #0]
	if (pin_no <= 7)
 80002fe:	887b      	ldrh	r3, [r7, #2]
 8000300:	2b07      	cmp	r3, #7
 8000302:	d80a      	bhi.n	800031a <hal_gpio_set_alt_function+0x2c>
		GPIOx->AFR[0] |= (alt_fun_value << (4 * pin_no));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	8839      	ldrh	r1, [r7, #0]
 800030a:	887a      	ldrh	r2, [r7, #2]
 800030c:	0092      	lsls	r2, r2, #2
 800030e:	fa01 f202 	lsl.w	r2, r1, r2
 8000312:	431a      	orrs	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	621a      	str	r2, [r3, #32]
	else
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
}
 8000318:	e00b      	b.n	8000332 <hal_gpio_set_alt_function+0x44>
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031e:	8839      	ldrh	r1, [r7, #0]
 8000320:	887a      	ldrh	r2, [r7, #2]
 8000322:	f002 0207 	and.w	r2, r2, #7
 8000326:	0092      	lsls	r2, r2, #2
 8000328:	fa01 f202 	lsl.w	r2, r1, r2
 800032c:	431a      	orrs	r2, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <hal_gpio_read_from_pin>:
 * @param	*GPIOx 			: pointer to GPIO Port base address
 * @param	pin_no			: GPIO pin number
 * @retval	uint8_t			: Value read
 */

uint8_t hal_gpio_read_from_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no) {
 800033e:	b480      	push	{r7}
 8000340:	b083      	sub	sp, #12
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	460b      	mov	r3, r1
 8000348:	807b      	strh	r3, [r7, #2]
	return (uint8_t)((GPIOx->IDR >> pin_no) & 0x00000001);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	691a      	ldr	r2, [r3, #16]
 800034e:	887b      	ldrh	r3, [r7, #2]
 8000350:	fa22 f303 	lsr.w	r3, r2, r3
 8000354:	b2db      	uxtb	r3, r3
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	b2db      	uxtb	r3, r3
}
 800035c:	4618      	mov	r0, r3
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <hal_gpio_write_to_pin>:
 * @param	pin_no			: GPIO pin number
 * @param	value			: value to write
 * @retval	void
 */

void hal_gpio_write_to_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint8_t value) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	807b      	strh	r3, [r7, #2]
 8000374:	4613      	mov	r3, r2
 8000376:	707b      	strb	r3, [r7, #1]
	if (value)
 8000378:	787b      	ldrb	r3, [r7, #1]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d009      	beq.n	8000392 <hal_gpio_write_to_pin+0x2a>
		GPIOx->ODR |= (1 << pin_no);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	887a      	ldrh	r2, [r7, #2]
 8000384:	2101      	movs	r1, #1
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	615a      	str	r2, [r3, #20]
	else
		GPIOx->ODR &= ~(1 << pin_no);
}
 8000390:	e009      	b.n	80003a6 <hal_gpio_write_to_pin+0x3e>
		GPIOx->ODR &= ~(1 << pin_no);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	887a      	ldrh	r2, [r7, #2]
 8000398:	2101      	movs	r1, #1
 800039a:	fa01 f202 	lsl.w	r2, r1, r2
 800039e:	43d2      	mvns	r2, r2
 80003a0:	401a      	ands	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	615a      	str	r2, [r3, #20]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <hal_gpio_init>:

void hal_gpio_init(GPIO_TypeDef *GPIOx, gpio_pin_conf_t *gpio_pin_conf) {
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	6039      	str	r1, [r7, #0]

	hal_gpio_configure_pin_mode(GPIOx, gpio_pin_conf->pin, gpio_pin_conf->mode); // set pin mode from input structure
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	b299      	uxth	r1, r3
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	461a      	mov	r2, r3
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ff2b 	bl	8000224 <hal_gpio_configure_pin_mode>
	hal_gpio_configure_pin_otype(GPIOx, gpio_pin_conf->pin,
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	b299      	uxth	r1, r3
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	461a      	mov	r2, r3
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f7ff ff43 	bl	8000266 <hal_gpio_configure_pin_otype>
			gpio_pin_conf->op_type);
	hal_gpio_configure_pin_resistor(GPIOx, gpio_pin_conf->pin,
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	b299      	uxth	r1, r3
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	461a      	mov	r2, r3
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff67 	bl	80002c0 <hal_gpio_configure_pin_resistor>
			gpio_pin_conf->pull);
	hal_gpio_configure_pin_speed(GPIOx, gpio_pin_conf->pin,
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	b299      	uxth	r1, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	461a      	mov	r2, r3
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f7ff ff47 	bl	8000292 <hal_gpio_configure_pin_speed>
			gpio_pin_conf->speed);

}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <hal_gpio_configure_interrupt>:

void hal_gpio_configure_interrupt(uint16_t pin_no, int_edge_sel_t edge_sel) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	460a      	mov	r2, r1
 8000416:	80fb      	strh	r3, [r7, #6]
 8000418:	4613      	mov	r3, r2
 800041a:	717b      	strb	r3, [r7, #5]


	EXTI->FTSR &= ~(1 << pin_no);
 800041c:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <hal_gpio_configure_interrupt+0x88>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	88fa      	ldrh	r2, [r7, #6]
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	43d2      	mvns	r2, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a19      	ldr	r2, [pc, #100]	; (8000494 <hal_gpio_configure_interrupt+0x88>)
 800042e:	400b      	ands	r3, r1
 8000430:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1 << pin_no);
 8000432:	4b18      	ldr	r3, [pc, #96]	; (8000494 <hal_gpio_configure_interrupt+0x88>)
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	88fa      	ldrh	r2, [r7, #6]
 8000438:	2101      	movs	r1, #1
 800043a:	fa01 f202 	lsl.w	r2, r1, r2
 800043e:	43d2      	mvns	r2, r2
 8000440:	4611      	mov	r1, r2
 8000442:	4a14      	ldr	r2, [pc, #80]	; (8000494 <hal_gpio_configure_interrupt+0x88>)
 8000444:	400b      	ands	r3, r1
 8000446:	6093      	str	r3, [r2, #8]
	if ((edge_sel == INT_FALLING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 8000448:	797b      	ldrb	r3, [r7, #5]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d002      	beq.n	8000454 <hal_gpio_configure_interrupt+0x48>
 800044e:	797b      	ldrb	r3, [r7, #5]
 8000450:	2b02      	cmp	r3, #2
 8000452:	d109      	bne.n	8000468 <hal_gpio_configure_interrupt+0x5c>
		EXTI->FTSR |= (1 << pin_no);
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <hal_gpio_configure_interrupt+0x88>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	88fa      	ldrh	r2, [r7, #6]
 800045a:	2101      	movs	r1, #1
 800045c:	fa01 f202 	lsl.w	r2, r1, r2
 8000460:	4611      	mov	r1, r2
 8000462:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <hal_gpio_configure_interrupt+0x88>)
 8000464:	430b      	orrs	r3, r1
 8000466:	60d3      	str	r3, [r2, #12]
	if ((edge_sel == INT_RISING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 8000468:	797b      	ldrb	r3, [r7, #5]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d002      	beq.n	8000474 <hal_gpio_configure_interrupt+0x68>
 800046e:	797b      	ldrb	r3, [r7, #5]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d109      	bne.n	8000488 <hal_gpio_configure_interrupt+0x7c>
		EXTI->RTSR |= (1 << pin_no);
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <hal_gpio_configure_interrupt+0x88>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	88fa      	ldrh	r2, [r7, #6]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a04      	ldr	r2, [pc, #16]	; (8000494 <hal_gpio_configure_interrupt+0x88>)
 8000484:	430b      	orrs	r3, r1
 8000486:	6093      	str	r3, [r2, #8]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40013c00 	.word	0x40013c00

08000498 <hal_gpio_enable_interrupt>:

void hal_gpio_enable_interrupt(uint16_t pin_no,IRQn_Type irq_no){
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	460a      	mov	r2, r1
 80004a2:	80fb      	strh	r3, [r7, #6]
 80004a4:	4613      	mov	r3, r2
 80004a6:	717b      	strb	r3, [r7, #5]

	EXTI->IMR |= (1 << pin_no);
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <hal_gpio_enable_interrupt+0x38>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	88fa      	ldrh	r2, [r7, #6]
 80004ae:	2101      	movs	r1, #1
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <hal_gpio_enable_interrupt+0x38>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq_no);
 80004bc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fe91 	bl	80001e8 <__NVIC_EnableIRQ>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40013c00 	.word	0x40013c00

080004d4 <hal_gpio_clear_interrupt>:

void hal_gpio_clear_interrupt(uint16_t pin_no) {
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
	if (EXTI->PR & (1 << pin_no))
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <hal_gpio_clear_interrupt+0x3c>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	88fa      	ldrh	r2, [r7, #6]
 80004e4:	2101      	movs	r1, #1
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	4013      	ands	r3, r2
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d009      	beq.n	8000504 <hal_gpio_clear_interrupt+0x30>
		EXTI->PR |= (1 << pin_no);
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <hal_gpio_clear_interrupt+0x3c>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	88fa      	ldrh	r2, [r7, #6]
 80004f6:	2101      	movs	r1, #1
 80004f8:	fa01 f202 	lsl.w	r2, r1, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a04      	ldr	r2, [pc, #16]	; (8000510 <hal_gpio_clear_interrupt+0x3c>)
 8000500:	430b      	orrs	r3, r1
 8000502:	6153      	str	r3, [r2, #20]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40013c00 	.word	0x40013c00

08000514 <main>:


int main(void)


{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
	uint32_t i=0;
 800051a:	2300      	movs	r3, #0
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t addcm[CMD_LENGTH];
	uint8_t ack_buf[2];

	spi_gpio_init();
 800051e:	f000 f889 	bl	8000634 <spi_gpio_init>


	led_init();  										// configure LED
 8000522:	f000 f837 	bl	8000594 <led_init>


	_HAL_RCC_GPIOG_CLK_ENABLE();
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <main+0x74>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a17      	ldr	r2, [pc, #92]	; (8000588 <main+0x74>)
 800052c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf_t gpio_pin_conf;
	gpio_pin_conf.pin = 15;
 8000532:	230f      	movs	r3, #15
 8000534:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.mode = GPIO_PIN_INPUT_MODE;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8000542:	2301      	movs	r3, #1
 8000544:	617b      	str	r3, [r7, #20]
	hal_gpio_init(GPIOG,&gpio_pin_conf);				// configure LED
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4619      	mov	r1, r3
 800054a:	4810      	ldr	r0, [pc, #64]	; (800058c <main+0x78>)
 800054c:	f7ff ff31 	bl	80003b2 <hal_gpio_init>

	RCC->APB2ENR |= (1 << 14);
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <main+0x74>)
 8000552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000554:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <main+0x74>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[3] &= (0b1111 << 12);
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <main+0x7c>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <main+0x7c>)
 8000562:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000566:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= (0b0110 << 12);
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <main+0x7c>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <main+0x7c>)
 800056e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000572:	6153      	str	r3, [r2, #20]
	hal_gpio_configure_interrupt(15, INT_FALLING_EDGE);
 8000574:	2101      	movs	r1, #1
 8000576:	200f      	movs	r0, #15
 8000578:	f7ff ff48 	bl	800040c <hal_gpio_configure_interrupt>
	hal_gpio_enable_interrupt(15, EXTI15_10_IRQn);
 800057c:	2128      	movs	r1, #40	; 0x28
 800057e:	200f      	movs	r0, #15
 8000580:	f7ff ff8a 	bl	8000498 <hal_gpio_enable_interrupt>


	while (1)
 8000584:	e7fe      	b.n	8000584 <main+0x70>
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40021800 	.word	0x40021800
 8000590:	40013800 	.word	0x40013800

08000594 <led_init>:
		;
}

void led_init(void){
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOI_CLK_ENABLE();
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <led_init+0x54>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <led_init+0x54>)
 80005a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf.pin = LED_RED;
 80005a6:	2309      	movs	r3, #9
 80005a8:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_OUTPUT_MODE;
 80005aa:	2301      	movs	r3, #1
 80005ac:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 80005b6:	2301      	movs	r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
	hal_gpio_init(GPIOI,&gpio_pin_conf);
 80005ba:	463b      	mov	r3, r7
 80005bc:	4619      	mov	r1, r3
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <led_init+0x58>)
 80005c0:	f7ff fef7 	bl	80003b2 <hal_gpio_init>

	_HAL_RCC_GPIOC_CLK_ENABLE();
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <led_init+0x54>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <led_init+0x54>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf.pin = LED_BLUE;
 80005d0:	2307      	movs	r3, #7
 80005d2:	603b      	str	r3, [r7, #0]
	hal_gpio_init(GPIOC, &gpio_pin_conf);
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <led_init+0x5c>)
 80005da:	f7ff feea 	bl	80003b2 <hal_gpio_init>

}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40022000 	.word	0x40022000
 80005f0:	40020800 	.word	0x40020800

080005f4 <led_toggle>:

void led_toggle(GPIO_TypeDef *GPIOx, uint16_t pin) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
	if (hal_gpio_read_from_pin(GPIOx, pin))
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	4619      	mov	r1, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff fe9a 	bl	800033e <hal_gpio_read_from_pin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d006      	beq.n	800061e <led_toggle+0x2a>
		hal_gpio_write_to_pin(GPIOx, pin, 0);
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff fea6 	bl	8000368 <hal_gpio_write_to_pin>
	else
		hal_gpio_write_to_pin(GPIOx, pin, 1);
}
 800061c:	e005      	b.n	800062a <led_toggle+0x36>
		hal_gpio_write_to_pin(GPIOx, pin, 1);
 800061e:	887b      	ldrh	r3, [r7, #2]
 8000620:	2201      	movs	r2, #1
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff fe9f 	bl	8000368 <hal_gpio_write_to_pin>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <spi_gpio_init>:

void spi_gpio_init(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <spi_gpio_init+0x7c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <spi_gpio_init+0x7c>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30

	/* configure GPIOB_PIN_13 for SPI CLK functionality */
	gpio_pin_conf.pin = SPI_CLK_PIN;
 8000646:	230d      	movs	r3, #13
 8000648:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_ALT_FUN_MODE;
 800064a:	2302      	movs	r3, #2
 800064c:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_PUSH_DOWN;
 8000652:	2302      	movs	r3, #2
 8000654:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8000656:	2301      	movs	r3, #1
 8000658:	613b      	str	r3, [r7, #16]

	hal_gpio_set_alt_function(GPIOB, SPI_CLK_PIN, GPIO_PIN_AF5_SPI2);
 800065a:	2205      	movs	r2, #5
 800065c:	210d      	movs	r1, #13
 800065e:	4815      	ldr	r0, [pc, #84]	; (80006b4 <spi_gpio_init+0x80>)
 8000660:	f7ff fe45 	bl	80002ee <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB,&gpio_pin_conf);
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <spi_gpio_init+0x80>)
 800066a:	f7ff fea2 	bl	80003b2 <hal_gpio_init>

	/* configure GPIOB_PIN_14 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MISO_PIN;
 800066e:	230e      	movs	r3, #14
 8000670:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 8000672:	2301      	movs	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOB, SPI_MISO_PIN, GPIO_PIN_AF5_SPI2);
 8000676:	2205      	movs	r2, #5
 8000678:	210e      	movs	r1, #14
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <spi_gpio_init+0x80>)
 800067c:	f7ff fe37 	bl	80002ee <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB, &gpio_pin_conf);
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <spi_gpio_init+0x80>)
 8000686:	f7ff fe94 	bl	80003b2 <hal_gpio_init>

	/* configure GPIOB_PIN_15 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MOSI_PIN;
 800068a:	230f      	movs	r3, #15
 800068c:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 800068e:	2301      	movs	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOB, SPI_MOSI_PIN, GPIO_PIN_AF5_SPI2);
 8000692:	2205      	movs	r2, #5
 8000694:	210f      	movs	r1, #15
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <spi_gpio_init+0x80>)
 8000698:	f7ff fe29 	bl	80002ee <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB, &gpio_pin_conf);
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <spi_gpio_init+0x80>)
 80006a2:	f7ff fe86 	bl	80003b2 <hal_gpio_init>
}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020400 	.word	0x40020400

080006b8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	hal_gpio_clear_interrupt(15);
 80006bc:	200f      	movs	r0, #15
 80006be:	f7ff ff09 	bl	80004d4 <hal_gpio_clear_interrupt>
	led_toggle(GPIOI,LED_RED);
 80006c2:	2109      	movs	r1, #9
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <EXTI15_10_IRQHandler+0x20>)
 80006c6:	f7ff ff95 	bl	80005f4 <led_toggle>
	led_toggle(GPIOC,LED_BLUE);
 80006ca:	2107      	movs	r1, #7
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <EXTI15_10_IRQHandler+0x24>)
 80006ce:	f7ff ff91 	bl	80005f4 <led_toggle>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40022000 	.word	0x40022000
 80006dc:	40020800 	.word	0x40020800

080006e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <LoopForever+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800070e:	f000 f811 	bl	8000734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000712:	f7ff feff 	bl	8000514 <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   r0, =_estack
 8000718:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000724:	0800079c 	.word	0x0800079c
  ldr r2, =_sbss
 8000728:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800072c:	2000001c 	.word	0x2000001c

08000730 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC_IRQHandler>
	...

08000734 <__libc_init_array>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	4d0d      	ldr	r5, [pc, #52]	; (800076c <__libc_init_array+0x38>)
 8000738:	4c0d      	ldr	r4, [pc, #52]	; (8000770 <__libc_init_array+0x3c>)
 800073a:	1b64      	subs	r4, r4, r5
 800073c:	10a4      	asrs	r4, r4, #2
 800073e:	2600      	movs	r6, #0
 8000740:	42a6      	cmp	r6, r4
 8000742:	d109      	bne.n	8000758 <__libc_init_array+0x24>
 8000744:	4d0b      	ldr	r5, [pc, #44]	; (8000774 <__libc_init_array+0x40>)
 8000746:	4c0c      	ldr	r4, [pc, #48]	; (8000778 <__libc_init_array+0x44>)
 8000748:	f000 f818 	bl	800077c <_init>
 800074c:	1b64      	subs	r4, r4, r5
 800074e:	10a4      	asrs	r4, r4, #2
 8000750:	2600      	movs	r6, #0
 8000752:	42a6      	cmp	r6, r4
 8000754:	d105      	bne.n	8000762 <__libc_init_array+0x2e>
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f855 3b04 	ldr.w	r3, [r5], #4
 800075c:	4798      	blx	r3
 800075e:	3601      	adds	r6, #1
 8000760:	e7ee      	b.n	8000740 <__libc_init_array+0xc>
 8000762:	f855 3b04 	ldr.w	r3, [r5], #4
 8000766:	4798      	blx	r3
 8000768:	3601      	adds	r6, #1
 800076a:	e7f2      	b.n	8000752 <__libc_init_array+0x1e>
 800076c:	08000794 	.word	0x08000794
 8000770:	08000794 	.word	0x08000794
 8000774:	08000794 	.word	0x08000794
 8000778:	08000798 	.word	0x08000798

0800077c <_init>:
 800077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077e:	bf00      	nop
 8000780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000782:	bc08      	pop	{r3}
 8000784:	469e      	mov	lr, r3
 8000786:	4770      	bx	lr

08000788 <_fini>:
 8000788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078a:	bf00      	nop
 800078c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078e:	bc08      	pop	{r3}
 8000790:	469e      	mov	lr, r3
 8000792:	4770      	bx	lr
