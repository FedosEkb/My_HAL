
My_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e18  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f9c  08000f9c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f9c  08000f9c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000f9c  08000f9c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f9c  08000f9c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f9c  08000f9c  00010f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fa0  08000fa0  00010fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000008  08000fac  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000fac  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002653  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000763  00000000  00000000  00022684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00022de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00022fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fbf  00000000  00000000  00023170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018e6  00000000  00000000  0003b12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085fc2  00000000  00000000  0003ca15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c29d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000744  00000000  00000000  000c2a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000008 	.word	0x20000008
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000f84 	.word	0x08000f84

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000000c 	.word	0x2000000c
 80001c0:	08000f84 	.word	0x08000f84

080001c4 <hal_spi_enable>:
/*
 * @brief  Enables the SPI device
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
void hal_spi_enable(SPI_TypeDef *SPIx) {
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	if (!(SPIx->CR1 & SPI_REG_CR1_SPE))
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d105      	bne.n	80001e4 <hal_spi_enable+0x20>
		SPIx->CR1 |= SPI_REG_CR1_SPE;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	601a      	str	r2, [r3, #0]
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <hal_spi_configure_phase_and_polarity>:
 * @param  phase : configures phase ,
 * @param  polarity : configures polarity
 * @retval None
 */
void hal_spi_configure_phase_and_polarity(SPI_TypeDef *SPIx,
		uint32_t phase_value, uint32_t polarity) {
 80001ee:	b480      	push	{r7}
 80001f0:	b085      	sub	sp, #20
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	60f8      	str	r0, [r7, #12]
 80001f6:	60b9      	str	r1, [r7, #8]
 80001f8:	607a      	str	r2, [r7, #4]
	if (phase_value) {
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d006      	beq.n	800020e <hal_spi_configure_phase_and_polarity+0x20>
		SPIx->CR1 |= SPI_REG_CR1_CPHA;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f043 0201 	orr.w	r2, r3, #1
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	e005      	b.n	800021a <hal_spi_configure_phase_and_polarity+0x2c>
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_CPHA;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f023 0201 	bic.w	r2, r3, #1
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	601a      	str	r2, [r3, #0]
	}
	if (polarity) {
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d006      	beq.n	800022e <hal_spi_configure_phase_and_polarity+0x40>
		SPIx->CR1 |= SPI_REG_CR1_CPOL;
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f043 0202 	orr.w	r2, r3, #2
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_CPOL;
	}
}
 800022c:	e005      	b.n	800023a <hal_spi_configure_phase_and_polarity+0x4c>
		SPIx->CR1 &= ~SPI_REG_CR1_CPOL;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f023 0202 	bic.w	r2, r3, #2
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <hal_spi_configure_device_mode>:
 * @brief  Configures master or slave mode
 * @param  *SPIx : Base address of the SPI
 * @param  master : if 1 , then configured for master
 * @retval None
 */
void hal_spi_configure_device_mode(SPI_TypeDef *SPIx, uint32_t master) {
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	if (master) {
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d006      	beq.n	8000262 <hal_spi_configure_device_mode+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_MSTR;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f043 0204 	orr.w	r2, r3, #4
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_MSTR;
	}
}
 8000260:	e005      	b.n	800026e <hal_spi_configure_device_mode+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_MSTR;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f023 0204 	bic.w	r2, r3, #4
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <hal_spi_configure_datasize>:
 * @param  datasize : data size to be configured  ,
 * @param  lsbmsbfirst : if 1, LSB will be sent first.
 * @retval None
 */
void hal_spi_configure_datasize(SPI_TypeDef *SPIx, uint32_t datasize_16,
		uint32_t lsbfirst) {
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
	if (datasize_16) {
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d006      	beq.n	8000298 <hal_spi_configure_datasize+0x20>
		SPIx->CR1 |= SPI_REG_CR1_DFF;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	e005      	b.n	80002a4 <hal_spi_configure_datasize+0x2c>
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_DFF;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]
	}
	if (lsbfirst) {
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d006      	beq.n	80002b8 <hal_spi_configure_datasize+0x40>
		SPIx->CR1 |= SPI_CR1_LSBFIRST;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_CR1_LSBFIRST;
	}
}
 80002b6:	e005      	b.n	80002c4 <hal_spi_configure_datasize+0x4c>
		SPIx->CR1 &= ~SPI_CR1_LSBFIRST;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	601a      	str	r2, [r3, #0]
}
 80002c4:	bf00      	nop
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr

080002ce <hal_spi_configure_nss_master>:
 * @brief  Configures the NSS pin of the master
 * @param  *SPIx : Base address of the SPI
 * @param  ssm_enable : enable or disable software chip select
 * @retval None
 */
void hal_spi_configure_nss_master(SPI_TypeDef *SPIx, uint32_t ssm_enable) {
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
 80002d6:	6039      	str	r1, [r7, #0]
	if (ssm_enable) {
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d00c      	beq.n	80002f8 <hal_spi_configure_nss_master+0x2a>
		SPIx->CR1 |= SPI_REG_CR1_SSM;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	601a      	str	r2, [r3, #0]
		SPIx->CR1 |= SPI_REG_CR1_SSI;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
	}
}
 80002f6:	e005      	b.n	8000304 <hal_spi_configure_nss_master+0x36>
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr

0800030e <hal_spi_configure_nss_slave>:
 * @brief  Configures the NSS pin of the slave
 * @param  *SPIx : Base address of the SPI
 * @param  ssm_enable : enable or disable software chip select
 * @retval None
 */
void hal_spi_configure_nss_slave(SPI_TypeDef *SPIx, uint32_t ssm_enable) {
 800030e:	b480      	push	{r7}
 8000310:	b083      	sub	sp, #12
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
 8000316:	6039      	str	r1, [r7, #0]
	if (ssm_enable) {
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d006      	beq.n	800032c <hal_spi_configure_nss_slave+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_SSM;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
	}

}
 800032a:	e005      	b.n	8000338 <hal_spi_configure_nss_slave+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr

08000342 <hal_spi_configure_baudrate>:
 * @brief  Configures SPI baudrate
 * @param  *SPIx : Base address of the SPI
 * @param  pre_scalar_value : pre scalar value to be used to generate baudrate
 * @retval None
 */
void hal_spi_configure_baudrate(SPI_TypeDef *SPIx, uint32_t pre_scalar_value) {
 8000342:	b480      	push	{r7}
 8000344:	b083      	sub	sp, #12
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
 800034a:	6039      	str	r1, [r7, #0]
	if (pre_scalar_value > 7)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b07      	cmp	r3, #7
 8000350:	d904      	bls.n	800035c <hal_spi_configure_baudrate+0x1a>
		SPIx->CR1 |= (0x00 << 3); //if pre_scalar_value > 7,then use default . that is 0
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	601a      	str	r2, [r3, #0]
	else
		SPIx->CR1 |= (pre_scalar_value << 3);
}
 800035a:	e006      	b.n	800036a <hal_spi_configure_baudrate+0x28>
		SPIx->CR1 |= (pre_scalar_value << 3);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	431a      	orrs	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	601a      	str	r2, [r3, #0]
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <hal_spi_configure_direction>:
 * @brief  Configures SPI direction
 * @param  *SPIx : Base address of the SPI
 * @param  direction : if 1, direction will be single line bi-directional else, 2 lines uni directional
 * @retval None
 */
void hal_spi_configure_direction(SPI_TypeDef *SPIx, uint32_t direction) {
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
	if (direction) {
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d006      	beq.n	8000392 <hal_spi_configure_direction+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_BIDIMODE;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_BIDIMODE;
	}
}
 8000390:	e005      	b.n	800039e <hal_spi_configure_direction+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_BIDIMODE;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	601a      	str	r2, [r3, #0]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <hal_spi_enable_txe_interrupt>:
 * @brief  Enables the Tx buffer empty interrupt (TXE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */

static void hal_spi_enable_txe_interrupt(SPI_TypeDef *SPIx) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	SPIx->CR2 |= SPI_REG_CR2_TXEIE_ENABLE;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	605a      	str	r2, [r3, #4]
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr

080003c6 <hal_spi_disable_txe_interrupt>:
/*
 * @brief  Disables the Tx buffer empty interrupt (TXE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_disable_txe_interrupt(SPI_TypeDef *SPIx) {
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
	SPIx->CR2 &= ~SPI_REG_CR2_TXEIE_ENABLE;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	605a      	str	r2, [r3, #4]
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <hal_spi_enable_rxne_interrupt>:
/*
 * @brief  Enables the RX buffer non empty interrupt (RXNE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_enable_rxne_interrupt(SPI_TypeDef *SPIx) {
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	SPIx->CR2 |= SPI_REG_CR2_RXNEIE_ENABLE;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	605a      	str	r2, [r3, #4]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <hal_spi_disable_rxne_interrupt>:
/*
 * @brief  Disables the RX buffer non empty interrupt (RXNE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_disable_rxne_interrupt(SPI_TypeDef *SPIx) {
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
	SPIx->CR2 &= ~SPI_REG_CR2_RXNEIE_ENABLE;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	605a      	str	r2, [r3, #4]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <hal_spi_init>:
/*
 * @brief  API used to do initialize the given SPI device
 * @param  *spi_handle : Pointer to SPI init structure
 * @retval void
 */
void hal_spi_init(spi_handle_t *spi_handle) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	/* configure the phase and polartiy */
	hal_spi_configure_phase_and_polarity(spi_handle->Instance,
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6818      	ldr	r0, [r3, #0]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6959      	ldr	r1, [r3, #20]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	691b      	ldr	r3, [r3, #16]
 8000434:	461a      	mov	r2, r3
 8000436:	f7ff feda 	bl	80001ee <hal_spi_configure_phase_and_polarity>
			spi_handle->Init.CLKPhase, spi_handle->Init.CLKPolarity);

	/* Configure the spi device mode */
	hal_spi_configure_device_mode(spi_handle->Instance, spi_handle->Init.Mode);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	4610      	mov	r0, r2
 8000446:	f7ff fefd 	bl	8000244 <hal_spi_configure_device_mode>

	/* Configure the spi data size */
	hal_spi_configure_datasize(spi_handle->Instance, spi_handle->Init.DataSize,
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6818      	ldr	r0, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	68d9      	ldr	r1, [r3, #12]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6a1b      	ldr	r3, [r3, #32]
 8000456:	461a      	mov	r2, r3
 8000458:	f7ff ff0e 	bl	8000278 <hal_spi_configure_datasize>
			spi_handle->Init.FirstBit);

	/* Configure the slave select line */
	if (spi_handle->Init.Mode == SPI_MASTER_MODE_SEL)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d108      	bne.n	8000476 <hal_spi_init+0x56>
		hal_spi_configure_nss_master(spi_handle->Instance,
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4619      	mov	r1, r3
 800046e:	4610      	mov	r0, r2
 8000470:	f7ff ff2d 	bl	80002ce <hal_spi_configure_nss_master>
 8000474:	e007      	b.n	8000486 <hal_spi_init+0x66>
				spi_handle->Init.NSS);
	else
		hal_spi_configure_nss_slave(spi_handle->Instance, spi_handle->Init.NSS);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4619      	mov	r1, r3
 8000480:	4610      	mov	r0, r2
 8000482:	f7ff ff44 	bl	800030e <hal_spi_configure_nss_slave>

	/* Configure the  SPI deivce speed */
	hal_spi_configure_baudrate(spi_handle->Instance,
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4619      	mov	r1, r3
 8000490:	4610      	mov	r0, r2
 8000492:	f7ff ff56 	bl	8000342 <hal_spi_configure_baudrate>
			spi_handle->Init.BaudRatePrescaler);

	/* Configure the SPI device direction */
	hal_spi_configure_direction(spi_handle->Instance,
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	4619      	mov	r1, r3
 80004a0:	4610      	mov	r0, r2
 80004a2:	f7ff ff67 	bl	8000374 <hal_spi_configure_direction>
			spi_handle->Init.Direction);
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <hal_spi_is_bus_busy>:
/*
 * @brief  Checks whether bus is free or busy
 * @param  *SPIx : Base address of the SPI
 * @retval return 1, if bus is busy
 */
uint8_t hal_spi_is_bus_busy(SPI_TypeDef *SPIx) {
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
	if (SPIx->SR & SPI_REG_SR_BUSY_FLAG) {
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <hal_spi_is_bus_busy+0x18>
		return SPI_IS_BUSY;
 80004c2:	2301      	movs	r3, #1
 80004c4:	e000      	b.n	80004c8 <hal_spi_is_bus_busy+0x1a>
	} else
		return SPI_IS_NOT_BUSY;
 80004c6:	2300      	movs	r3, #0
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <hal_spi_master_tx>:
 * @param  *SPIx : Base address of the SPI
 * @param  *buffer : pointer to the tx buffer
 * @param  len : len of tx data
 * @retval none
 */
void hal_spi_master_tx(spi_handle_t *spi_handle, uint8_t *buffer, uint32_t len) {
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b084      	sub	sp, #16
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	spi_handle->pTxBuffPtr = buffer;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	625a      	str	r2, [r3, #36]	; 0x24
	spi_handle->TxXferCount = len;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	855a      	strh	r2, [r3, #42]	; 0x2a
	spi_handle->TxXferSize = len;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	851a      	strh	r2, [r3, #40]	; 0x28

	spi_handle->RxXferCount = 0;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	2200      	movs	r2, #0
 80004f8:	865a      	strh	r2, [r3, #50]	; 0x32
	spi_handle->RxXferSize = 0;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2200      	movs	r2, #0
 80004fe:	861a      	strh	r2, [r3, #48]	; 0x30

	spi_handle->State = HAL_SPI_STATE_BUSY_TX;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2212      	movs	r2, #18
 8000504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	hal_spi_enable_txe_interrupt(spi_handle->Instance);
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff4b 	bl	80003a8 <hal_spi_enable_txe_interrupt>
	hal_spi_enable(spi_handle->Instance);
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe54 	bl	80001c4 <hal_spi_enable>
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <hal_spi_master_rx>:
 * @param  *buffer : pointer to the rx buffer
 * @param  len : len of rx data
 * @retval none
 */
void hal_spi_master_rx(spi_handle_t *spi_handle, uint8_t *rx_buffer,
		uint32_t len) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
	uint32_t i = 0, val;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]

	/* this is a dummy tx */
	spi_handle->pTxBuffPtr = dummu_tx;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a18      	ldr	r2, [pc, #96]	; (8000598 <hal_spi_master_rx+0x74>)
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
	spi_handle->TxXferSize = len;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	b29a      	uxth	r2, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	851a      	strh	r2, [r3, #40]	; 0x28
	spi_handle->TxXferCount = len;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	b29a      	uxth	r2, r3
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	855a      	strh	r2, [r3, #42]	; 0x2a

	/* data will be rxed to rx_buffer */
	spi_handle->pRxBuffPtr = rx_buffer;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	62da      	str	r2, [r3, #44]	; 0x2c
	spi_handle->RxXferSize = len;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	b29a      	uxth	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	861a      	strh	r2, [r3, #48]	; 0x30
	spi_handle->RxXferCount = len;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	b29a      	uxth	r2, r3
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	865a      	strh	r2, [r3, #50]	; 0x32

	/* Driver is busy in RX */
	spi_handle->State = HAL_SPI_STATE_BUSY_RX;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2222      	movs	r2, #34	; 0x22
 8000564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* read data register once before enabling
	 * the RXNE interrupt to make sure DR is empty
	 */

	val = spi_handle->Instance->DR;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	613b      	str	r3, [r7, #16]

	/* Now enable both TXE and RXNE Interrupt */
	hal_spi_enable_rxne_interrupt(spi_handle->Instance);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff35 	bl	80003e4 <hal_spi_enable_rxne_interrupt>
	hal_spi_enable_txe_interrupt(spi_handle->Instance);
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ff12 	bl	80003a8 <hal_spi_enable_txe_interrupt>

	hal_spi_enable(spi_handle->Instance);
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe1b 	bl	80001c4 <hal_spi_enable>
}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000024 	.word	0x20000024

0800059c <hal_spi_tx_close_interrupt>:
 * @brief   close Tx transfer
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_tx_close_interrupt(spi_handle_t *hspi) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	/* Disable TXE interrupt */
	hal_spi_disable_txe_interrupt(hspi->Instance);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff0c 	bl	80003c6 <hal_spi_disable_txe_interrupt>

	/* if master and if driver state is not HAL_SPI_STATE_BUSY_RX then make state = READY */
	if (hspi->Init.Mode && (hspi->State != HAL_SPI_STATE_BUSY_RX))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d008      	beq.n	80005c8 <hal_spi_tx_close_interrupt+0x2c>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005bc:	2b22      	cmp	r3, #34	; 0x22
 80005be:	d003      	beq.n	80005c8 <hal_spi_tx_close_interrupt+0x2c>
		hspi->State = HAL_SPI_STATE_READY;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2201      	movs	r2, #1
 80005c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <hal_spi_handle_tx_interrupt>:
 *               the configuration information for SPI module.
 * @retval void
 */


void hal_spi_handle_tx_interrupt(spi_handle_t *hspi) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if (hspi->Init.DataSize == SPI_8BIT_DF_ENABLE) { /* Transmit data in 8 Bit mode */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d10f      	bne.n	8000600 <hal_spi_handle_tx_interrupt+0x30>
		hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e4:	1c59      	adds	r1, r3, #1
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	6251      	str	r1, [r2, #36]	; 0x24
 80005ea:	781a      	ldrb	r2, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60da      	str	r2, [r3, #12]
		hspi->TxXferCount--; //we sent 1 byte
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80005f6:	3b01      	subs	r3, #1
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80005fe:	e010      	b.n	8000622 <hal_spi_handle_tx_interrupt+0x52>
	} else { /* Transmit data in 16 Bit mode */
		hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000604:	881a      	ldrh	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	60da      	str	r2, [r3, #12]
		hspi->pTxBuffPtr += 2;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	1c9a      	adds	r2, r3, #2
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
		hspi->TxXferCount -= 2; //we sent 2 bytes in one go
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800061a:	3b02      	subs	r3, #2
 800061c:	b29a      	uxth	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	855a      	strh	r2, [r3, #42]	; 0x2a
	}
	if (hspi->TxXferCount == 0) /* we reached end of transmission, so close the txe interrupt */
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <hal_spi_handle_tx_interrupt+0x60>
		hal_spi_tx_close_interrupt(hspi);
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff ffb6 	bl	800059c <hal_spi_tx_close_interrupt>

}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <hal_spi_close_rx_interrupt>:
 * @brief   close Rx transfer
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_close_rx_interrupt(spi_handle_t *hspi) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	while (hal_spi_is_bus_busy(hspi->Instance))
 8000640:	bf00      	nop
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff31 	bl	80004ae <hal_spi_is_bus_busy>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1f7      	bne.n	8000642 <hal_spi_close_rx_interrupt+0xa>
		; /* Disable RXNE interrupt */

	hal_spi_disable_rxne_interrupt(hspi->Instance);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fed3 	bl	8000402 <hal_spi_disable_rxne_interrupt>
	hspi->State = HAL_SPI_STATE_READY;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2201      	movs	r2, #1
 8000660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <hal_spi_handle_rx_interrupt>:
 * @brief   handles  RXNE interrupt
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_handle_rx_interrupt(spi_handle_t *hspi) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if (hspi->Init.DataSize == SPI_8BIT_DF_ENABLE) { /* Receive data in 8 Bit mode */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d114      	bne.n	80006a6 <hal_spi_handle_rx_interrupt+0x3a>

		if (hspi->pRxBuffPtr) //NULL check
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000680:	2b00      	cmp	r3, #0
 8000682:	d009      	beq.n	8000698 <hal_spi_handle_rx_interrupt+0x2c>
			(*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	68d8      	ldr	r0, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068e:	1c59      	adds	r1, r3, #1
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000694:	b2c2      	uxtb	r2, r0
 8000696:	701a      	strb	r2, [r3, #0]
		hspi->RxXferCount--;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800069c:	3b01      	subs	r3, #1
 800069e:	b29a      	uxth	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	865a      	strh	r2, [r3, #50]	; 0x32
 80006a4:	e011      	b.n	80006ca <hal_spi_handle_rx_interrupt+0x5e>
	} else { /* Receive data in 16 Bit mode */
		*((uint16_t*) hspi->pRxBuffPtr) = hspi->Instance->DR;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68da      	ldr	r2, [r3, #12]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b0:	b292      	uxth	r2, r2
 80006b2:	801a      	strh	r2, [r3, #0]
		hspi->pRxBuffPtr += 2;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b8:	1c9a      	adds	r2, r3, #2
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi->RxXferCount -= 2;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80006c2:	3b02      	subs	r3, #2
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	865a      	strh	r2, [r3, #50]	; 0x32
	}

	if (hspi->RxXferCount == 0) { /*We are done with the Rxing of data, lets close the rxne interrupt */
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d102      	bne.n	80006d8 <hal_spi_handle_rx_interrupt+0x6c>
		hal_spi_close_rx_interrupt(hspi);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ffb0 	bl	8000638 <hal_spi_close_rx_interrupt>
	}
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <hal_spi_irq_handler>:
 * @brief  This function handles SPI interrupt request.
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval none
 */
void hal_spi_irq_handler(spi_handle_t *hspi) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0, tmp2 = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]

	/* check to see RXNE is set in the status register */
	tmp1 = (hspi->Instance->SR & SPI_REG_SR_RXNE_FLAG);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	/* check whether RXNEIE bit is enabled in the control register. */
	tmp2 = (hspi->Instance->CR2 & SPI_REG_CR2_RXNEIE_ENABLE);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000706:	60bb      	str	r3, [r7, #8]

	if ((tmp1 != RESET) && (tmp2 != RESET)) {
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d006      	beq.n	800071c <hal_spi_irq_handler+0x3c>
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d003      	beq.n	800071c <hal_spi_irq_handler+0x3c>
		/* RXNE flag is set
		 * handle the RX of data bytes
		 */
		hal_spi_handle_rx_interrupt(hspi);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ffa9 	bl	800066c <hal_spi_handle_rx_interrupt>
		return;
 800071a:	e015      	b.n	8000748 <hal_spi_irq_handler+0x68>
	}

	/* check to see TXE is set in the status register */
	tmp1 = (hspi->Instance->SR & SPI_REG_SR_TXE_FLAG);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	60fb      	str	r3, [r7, #12]
	tmp2 = (hspi->Instance->CR2 & SPI_REG_CR2_TXEIE_ENABLE);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	60bb      	str	r3, [r7, #8]

	if ((tmp1 != RESET) && (tmp2 != RESET)) {
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <hal_spi_irq_handler+0x68>
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <hal_spi_irq_handler+0x68>
		/* TXE flag is set
		 * handle the TX of data bytes
		 */
		hal_spi_handle_tx_interrupt(hspi);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff45 	bl	80005d0 <hal_spi_handle_tx_interrupt>
		return;
 8000746:	bf00      	nop
	}

}
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db0b      	blt.n	800077a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 021f 	and.w	r2, r3, #31
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <__NVIC_EnableIRQ+0x34>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	2001      	movs	r0, #1
 8000772:	fa00 f202 	lsl.w	r2, r0, r2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100

08000788 <hal_gpio_configure_pin_mode>:
 * @param	mode			: mode to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_mode(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t mode) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	460b      	mov	r3, r1
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	817b      	strh	r3, [r7, #10]
	GPIOx->MODER &= ~(0x03 << (2 * pin_no));
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	897a      	ldrh	r2, [r7, #10]
 800079c:	0052      	lsls	r2, r2, #1
 800079e:	2103      	movs	r1, #3
 80007a0:	fa01 f202 	lsl.w	r2, r1, r2
 80007a4:	43d2      	mvns	r2, r2
 80007a6:	401a      	ands	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << (2 * pin_no));
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	897b      	ldrh	r3, [r7, #10]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	431a      	orrs	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <hal_gpio_configure_pin_otype>:
 * @param	op_type			: output type to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_otype(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t op_type) {
 80007ca:	b480      	push	{r7}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	460b      	mov	r3, r1
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	817b      	strh	r3, [r7, #10]
	GPIOx->OTYPER |= (op_type << (pin_no));
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	897b      	ldrh	r3, [r7, #10]
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	fa01 f303 	lsl.w	r3, r1, r3
 80007e4:	431a      	orrs	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	605a      	str	r2, [r3, #4]
}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <hal_gpio_configure_pin_speed>:
 * @param	speed			: speed to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_speed(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t speed) {
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	460b      	mov	r3, r1
 80007fe:	607a      	str	r2, [r7, #4]
 8000800:	817b      	strh	r3, [r7, #10]
	GPIOx->OSPEEDR |= (speed << (2 * pin_no));
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	897b      	ldrh	r3, [r7, #10]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	431a      	orrs	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	609a      	str	r2, [r3, #8]
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <hal_gpio_configure_pin_resistor>:
 * @param	resistor		: pull up, push down, nothing
 * @retval	void
 */

static void hal_gpio_configure_pin_resistor(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t resistor) {
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	460b      	mov	r3, r1
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	817b      	strh	r3, [r7, #10]
	GPIOx->PUPDR |= (resistor << (2 * pin_no));
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	68da      	ldr	r2, [r3, #12]
 8000832:	897b      	ldrh	r3, [r7, #10]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	431a      	orrs	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	60da      	str	r2, [r3, #12]
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <hal_gpio_set_alt_function>:
 * @param	pin_no			: GPIO pin number
 * @param	alt_fun_value	: alternate function to be configured
 * @retval	void
 */
void hal_gpio_set_alt_function(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint16_t alt_fun_value) {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
 8000858:	4613      	mov	r3, r2
 800085a:	803b      	strh	r3, [r7, #0]
	if (pin_no <= 7)
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	2b07      	cmp	r3, #7
 8000860:	d80a      	bhi.n	8000878 <hal_gpio_set_alt_function+0x2c>
		GPIOx->AFR[0] |= (alt_fun_value << (4 * pin_no));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6a1b      	ldr	r3, [r3, #32]
 8000866:	8839      	ldrh	r1, [r7, #0]
 8000868:	887a      	ldrh	r2, [r7, #2]
 800086a:	0092      	lsls	r2, r2, #2
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	431a      	orrs	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	621a      	str	r2, [r3, #32]
	else
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
}
 8000876:	e00b      	b.n	8000890 <hal_gpio_set_alt_function+0x44>
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087c:	8839      	ldrh	r1, [r7, #0]
 800087e:	887a      	ldrh	r2, [r7, #2]
 8000880:	f002 0207 	and.w	r2, r2, #7
 8000884:	0092      	lsls	r2, r2, #2
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	431a      	orrs	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <hal_gpio_read_from_pin>:
 * @param	*GPIOx 			: pointer to GPIO Port base address
 * @param	pin_no			: GPIO pin number
 * @retval	uint8_t			: Value read
 */

uint8_t hal_gpio_read_from_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no) {
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	807b      	strh	r3, [r7, #2]
	return (uint8_t)((GPIOx->IDR >> pin_no) & 0x00000001);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	691a      	ldr	r2, [r3, #16]
 80008aa:	887b      	ldrh	r3, [r7, #2]
 80008ac:	fa22 f303 	lsr.w	r3, r2, r3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <hal_gpio_write_to_pin>:
 * @param	pin_no			: GPIO pin number
 * @param	value			: value to write
 * @retval	void
 */

void hal_gpio_write_to_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint8_t value) {
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	460b      	mov	r3, r1
 80008cc:	807b      	strh	r3, [r7, #2]
 80008ce:	4613      	mov	r3, r2
 80008d0:	707b      	strb	r3, [r7, #1]
	if (value)
 80008d2:	787b      	ldrb	r3, [r7, #1]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d009      	beq.n	80008ec <hal_gpio_write_to_pin+0x2a>
		GPIOx->ODR |= (1 << pin_no);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	887a      	ldrh	r2, [r7, #2]
 80008de:	2101      	movs	r1, #1
 80008e0:	fa01 f202 	lsl.w	r2, r1, r2
 80008e4:	431a      	orrs	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	615a      	str	r2, [r3, #20]
	else
		GPIOx->ODR &= ~(1 << pin_no);
}
 80008ea:	e009      	b.n	8000900 <hal_gpio_write_to_pin+0x3e>
		GPIOx->ODR &= ~(1 << pin_no);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	887a      	ldrh	r2, [r7, #2]
 80008f2:	2101      	movs	r1, #1
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	43d2      	mvns	r2, r2
 80008fa:	401a      	ands	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	615a      	str	r2, [r3, #20]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <hal_gpio_init>:

void hal_gpio_init(GPIO_TypeDef *GPIOx, gpio_pin_conf_t *gpio_pin_conf) {
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	6039      	str	r1, [r7, #0]

	hal_gpio_configure_pin_mode(GPIOx, gpio_pin_conf->pin, gpio_pin_conf->mode); // set pin mode from input structure
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	b299      	uxth	r1, r3
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	461a      	mov	r2, r3
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff31 	bl	8000788 <hal_gpio_configure_pin_mode>
	hal_gpio_configure_pin_otype(GPIOx, gpio_pin_conf->pin,
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	b299      	uxth	r1, r3
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ff49 	bl	80007ca <hal_gpio_configure_pin_otype>
			gpio_pin_conf->op_type);
	hal_gpio_configure_pin_resistor(GPIOx, gpio_pin_conf->pin,
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	b299      	uxth	r1, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	461a      	mov	r2, r3
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff6b 	bl	8000820 <hal_gpio_configure_pin_resistor>
			gpio_pin_conf->pull);
	hal_gpio_configure_pin_speed(GPIOx, gpio_pin_conf->pin,
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	b299      	uxth	r1, r3
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	691b      	ldr	r3, [r3, #16]
 8000954:	461a      	mov	r2, r3
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ff4c 	bl	80007f4 <hal_gpio_configure_pin_speed>
			gpio_pin_conf->speed);

}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <hal_gpio_configure_interrupt>:

void hal_gpio_configure_interrupt(uint16_t pin_no, int_edge_sel_t edge_sel) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	460a      	mov	r2, r1
 800096e:	80fb      	strh	r3, [r7, #6]
 8000970:	4613      	mov	r3, r2
 8000972:	717b      	strb	r3, [r7, #5]


	EXTI->FTSR &= ~(1 << pin_no);
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <hal_gpio_configure_interrupt+0x88>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	88fa      	ldrh	r2, [r7, #6]
 800097a:	2101      	movs	r1, #1
 800097c:	fa01 f202 	lsl.w	r2, r1, r2
 8000980:	43d2      	mvns	r2, r2
 8000982:	4611      	mov	r1, r2
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <hal_gpio_configure_interrupt+0x88>)
 8000986:	400b      	ands	r3, r1
 8000988:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1 << pin_no);
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <hal_gpio_configure_interrupt+0x88>)
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	88fa      	ldrh	r2, [r7, #6]
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	43d2      	mvns	r2, r2
 8000998:	4611      	mov	r1, r2
 800099a:	4a14      	ldr	r2, [pc, #80]	; (80009ec <hal_gpio_configure_interrupt+0x88>)
 800099c:	400b      	ands	r3, r1
 800099e:	6093      	str	r3, [r2, #8]
	if ((edge_sel == INT_FALLING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 80009a0:	797b      	ldrb	r3, [r7, #5]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d002      	beq.n	80009ac <hal_gpio_configure_interrupt+0x48>
 80009a6:	797b      	ldrb	r3, [r7, #5]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d109      	bne.n	80009c0 <hal_gpio_configure_interrupt+0x5c>
		EXTI->FTSR |= (1 << pin_no);
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <hal_gpio_configure_interrupt+0x88>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	88fa      	ldrh	r2, [r7, #6]
 80009b2:	2101      	movs	r1, #1
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	4611      	mov	r1, r2
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <hal_gpio_configure_interrupt+0x88>)
 80009bc:	430b      	orrs	r3, r1
 80009be:	60d3      	str	r3, [r2, #12]
	if ((edge_sel == INT_RISING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 80009c0:	797b      	ldrb	r3, [r7, #5]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <hal_gpio_configure_interrupt+0x68>
 80009c6:	797b      	ldrb	r3, [r7, #5]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d109      	bne.n	80009e0 <hal_gpio_configure_interrupt+0x7c>
		EXTI->RTSR |= (1 << pin_no);
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <hal_gpio_configure_interrupt+0x88>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	88fa      	ldrh	r2, [r7, #6]
 80009d2:	2101      	movs	r1, #1
 80009d4:	fa01 f202 	lsl.w	r2, r1, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <hal_gpio_configure_interrupt+0x88>)
 80009dc:	430b      	orrs	r3, r1
 80009de:	6093      	str	r3, [r2, #8]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40013c00 	.word	0x40013c00

080009f0 <hal_gpio_enable_interrupt>:

void hal_gpio_enable_interrupt(uint16_t pin_no,IRQn_Type irq_no){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	460a      	mov	r2, r1
 80009fa:	80fb      	strh	r3, [r7, #6]
 80009fc:	4613      	mov	r3, r2
 80009fe:	717b      	strb	r3, [r7, #5]

	EXTI->IMR |= (1 << pin_no);
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <hal_gpio_enable_interrupt+0x38>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	2101      	movs	r1, #1
 8000a08:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <hal_gpio_enable_interrupt+0x38>)
 8000a10:	430b      	orrs	r3, r1
 8000a12:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq_no);
 8000a14:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe99 	bl	8000750 <__NVIC_EnableIRQ>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40013c00 	.word	0x40013c00

08000a2c <hal_gpio_clear_interrupt>:

void hal_gpio_clear_interrupt(uint16_t pin_no) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
	if (EXTI->PR & (1 << pin_no))
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <hal_gpio_clear_interrupt+0x3c>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	88fa      	ldrh	r2, [r7, #6]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d009      	beq.n	8000a5c <hal_gpio_clear_interrupt+0x30>
		EXTI->PR |= (1 << pin_no);
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <hal_gpio_clear_interrupt+0x3c>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	88fa      	ldrh	r2, [r7, #6]
 8000a4e:	2101      	movs	r1, #1
 8000a50:	fa01 f202 	lsl.w	r2, r1, r2
 8000a54:	4611      	mov	r1, r2
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <hal_gpio_clear_interrupt+0x3c>)
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	6153      	str	r3, [r2, #20]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40013c00 	.word	0x40013c00

08000a6c <__NVIC_EnableIRQ>:
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db0b      	blt.n	8000a96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f003 021f 	and.w	r2, r3, #31
 8000a84:	4906      	ldr	r1, [pc, #24]	; (8000aa0 <__NVIC_EnableIRQ+0x34>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <main>:


int main(void)


{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0
	//uint32_t i=0;
	uint8_t addcm[CMD_LENGTH];
	uint8_t ack_buf[2];

	spi_gpio_init();
 8000aaa:	f000 f98f 	bl	8000dcc <spi_gpio_init>


	led_init();  										// configure LED
 8000aae:	f000 f93d 	bl	8000d2c <led_init>


	/* Configure USER Button as ext interrupt throw EXTI15 */

	_HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b89      	ldr	r3, [pc, #548]	; (8000cd8 <main+0x234>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a88      	ldr	r2, [pc, #544]	; (8000cd8 <main+0x234>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf_t gpio_pin_conf;
	gpio_pin_conf.pin = GPIO_BUTTON_PIN;
 8000abe:	230f      	movs	r3, #15
 8000ac0:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_INPUT_MODE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	613b      	str	r3, [r7, #16]
	hal_gpio_init(GPIO_BUTTON_PORT,&gpio_pin_conf);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4881      	ldr	r0, [pc, #516]	; (8000cdc <main+0x238>)
 8000ad8:	f7ff ff17 	bl	800090a <hal_gpio_init>

	RCC->APB2ENR |= (1 << 14);
 8000adc:	4b7e      	ldr	r3, [pc, #504]	; (8000cd8 <main+0x234>)
 8000ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae0:	4a7d      	ldr	r2, [pc, #500]	; (8000cd8 <main+0x234>)
 8000ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae6:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[3] &= (0b1111 << 12);
 8000ae8:	4b7d      	ldr	r3, [pc, #500]	; (8000ce0 <main+0x23c>)
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	4a7c      	ldr	r2, [pc, #496]	; (8000ce0 <main+0x23c>)
 8000aee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000af2:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= (0b0110 << 12);
 8000af4:	4b7a      	ldr	r3, [pc, #488]	; (8000ce0 <main+0x23c>)
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	4a79      	ldr	r2, [pc, #484]	; (8000ce0 <main+0x23c>)
 8000afa:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000afe:	6153      	str	r3, [r2, #20]
	hal_gpio_configure_interrupt(GPIO_BUTTON_PIN, INT_FALLING_EDGE);
 8000b00:	2101      	movs	r1, #1
 8000b02:	200f      	movs	r0, #15
 8000b04:	f7ff ff2e 	bl	8000964 <hal_gpio_configure_interrupt>
	hal_gpio_enable_interrupt(GPIO_BUTTON_PIN, EXTI15_10_IRQn);
 8000b08:	2128      	movs	r1, #40	; 0x28
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f7ff ff70 	bl	80009f0 <hal_gpio_enable_interrupt>

	_HAL_RCC_SPI2_CLK_ENABLE();
 8000b10:	4b71      	ldr	r3, [pc, #452]	; (8000cd8 <main+0x234>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a70      	ldr	r2, [pc, #448]	; (8000cd8 <main+0x234>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40


	/*fill up the SPI handle structure */
	SpiHandle.Instance				= SPI_2;
 8000b1c:	4b71      	ldr	r3, [pc, #452]	; (8000ce4 <main+0x240>)
 8000b1e:	4a72      	ldr	r2, [pc, #456]	; (8000ce8 <main+0x244>)
 8000b20:	601a      	str	r2, [r3, #0]

	SpiHandle.Init.BaudRatePrescaler = SPI_REG_CR1_BR_PCLK_DIV_32;
 8000b22:	4b70      	ldr	r3, [pc, #448]	; (8000ce4 <main+0x240>)
 8000b24:	2220      	movs	r2, #32
 8000b26:	61da      	str	r2, [r3, #28]
	SpiHandle.Init.Direction         = SPI_ENABLE_2_LINE_UNI_DIR;
 8000b28:	4b6e      	ldr	r3, [pc, #440]	; (8000ce4 <main+0x240>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
	SpiHandle.Init.CLKPhase          = SPI_SECOND_CLOCK_TRANS;
 8000b2e:	4b6d      	ldr	r3, [pc, #436]	; (8000ce4 <main+0x240>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	615a      	str	r2, [r3, #20]
	SpiHandle.Init.CLKPolarity       = SPI_CPOL_LOW;
 8000b34:	4b6b      	ldr	r3, [pc, #428]	; (8000ce4 <main+0x240>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
	SpiHandle.Init.DataSize          = SPI_8BIT_DF_ENABLE;
 8000b3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ce4 <main+0x240>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
	SpiHandle.Init.FirstBit          = SPI_MSB_FIRST;
 8000b40:	4b68      	ldr	r3, [pc, #416]	; (8000ce4 <main+0x240>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
	SpiHandle.Init.NSS               = SPI_SSM_ENABLE;
 8000b46:	4b67      	ldr	r3, [pc, #412]	; (8000ce4 <main+0x240>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	619a      	str	r2, [r3, #24]
	SpiHandle.Init.Mode              = SPI_MASTER_MODE_SEL;
 8000b4c:	4b65      	ldr	r3, [pc, #404]	; (8000ce4 <main+0x240>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	605a      	str	r2, [r3, #4]

	SpiHandle.State = HAL_SPI_STATE_READY;
 8000b52:	4b64      	ldr	r3, [pc, #400]	; (8000ce4 <main+0x240>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Call driver API to initialize the SPI device */
	hal_spi_init(&SpiHandle);
 8000b5a:	4862      	ldr	r0, [pc, #392]	; (8000ce4 <main+0x240>)
 8000b5c:	f7ff fc60 	bl	8000420 <hal_spi_init>

	/* Enable the IRQs in the NVIC */
	NVIC_EnableIRQ(SPI2_IRQn);
 8000b60:	2024      	movs	r0, #36	; 0x24
 8000b62:	f7ff ff83 	bl	8000a6c <__NVIC_EnableIRQ>

	/* Wait for user Button press before starting the communication. Toggles LED_ORANGE until then */
	while (TestReady != SET) {
 8000b66:	e005      	b.n	8000b74 <main+0xd0>
		led_toggle(GPIOI, LED_RED);
 8000b68:	2109      	movs	r1, #9
 8000b6a:	4860      	ldr	r0, [pc, #384]	; (8000cec <main+0x248>)
 8000b6c:	f000 f90e 	bl	8000d8c <led_toggle>
		//LED3 (orange)
		delay_gen();
 8000b70:	f000 f8c8 	bl	8000d04 <delay_gen>
	while (TestReady != SET) {
 8000b74:	4b5e      	ldr	r3, [pc, #376]	; (8000cf0 <main+0x24c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d1f5      	bne.n	8000b68 <main+0xc4>
	}
	hal_gpio_write_to_pin(GPIOI, LED_RED, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2109      	movs	r1, #9
 8000b80:	485a      	ldr	r0, [pc, #360]	; (8000cec <main+0x248>)
 8000b82:	f7ff fe9e 	bl	80008c2 <hal_gpio_write_to_pin>

	while (1) {
		//check for state ready
		while (SpiHandle.State != HAL_SPI_STATE_READY)
 8000b86:	bf00      	nop
 8000b88:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <main+0x240>)
 8000b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d1fa      	bne.n	8000b88 <main+0xe4>
			;

		/* Master write command */
		addcm[0] = (uint8_t) CMD_MASTER_WRITE;
 8000b92:	2378      	movs	r3, #120	; 0x78
 8000b94:	773b      	strb	r3, [r7, #28]
		addcm[1] = (uint8_t) ( CMD_MASTER_WRITE >> 8);
 8000b96:	2356      	movs	r3, #86	; 0x56
 8000b98:	777b      	strb	r3, [r7, #29]

		/* first send the master write cmd to slave */
		hal_spi_master_tx(&SpiHandle, addcm, CMD_LENGTH);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4850      	ldr	r0, [pc, #320]	; (8000ce4 <main+0x240>)
 8000ba4:	f7ff fc95 	bl	80004d2 <hal_spi_master_tx>

		/* application can block here, or can do other task untill above tx finishes */
		while (SpiHandle.State != HAL_SPI_STATE_READY)
 8000ba8:	bf00      	nop
 8000baa:	4b4e      	ldr	r3, [pc, #312]	; (8000ce4 <main+0x240>)
 8000bac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d1fa      	bne.n	8000baa <main+0x106>
			;

		/* this dealy helps for the slave to be ready with the ACK bytes */
		delay_gen();
 8000bb4:	f000 f8a6 	bl	8000d04 <delay_gen>

		/* read back the ACK bytes from the slave */
		hal_spi_master_rx(&SpiHandle, ack_buf, ACK_LEN);
 8000bb8:	f107 0318 	add.w	r3, r7, #24
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4848      	ldr	r0, [pc, #288]	; (8000ce4 <main+0x240>)
 8000bc2:	f7ff fcaf 	bl	8000524 <hal_spi_master_rx>

		/* wait untill ACK reception finishes */
		while (SpiHandle.State != HAL_SPI_STATE_READY)
 8000bc6:	bf00      	nop
 8000bc8:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <main+0x240>)
 8000bca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d1fa      	bne.n	8000bc8 <main+0x124>
			;

		/* did we rcv the valid ACK from slave ?? */
		if (ack_buf[1] == 0XE5 && ack_buf[0] == 0xD5) {
 8000bd2:	7e7b      	ldrb	r3, [r7, #25]
 8000bd4:	2be5      	cmp	r3, #229	; 0xe5
 8000bd6:	d10e      	bne.n	8000bf6 <main+0x152>
 8000bd8:	7e3b      	ldrb	r3, [r7, #24]
 8000bda:	2bd5      	cmp	r3, #213	; 0xd5
 8000bdc:	d10b      	bne.n	8000bf6 <main+0x152>
			//correct ack
			led_toggle(GPIOC, LED_BLUE);
 8000bde:	2107      	movs	r1, #7
 8000be0:	4844      	ldr	r0, [pc, #272]	; (8000cf4 <main+0x250>)
 8000be2:	f000 f8d3 	bl	8000d8c <led_toggle>
			memset(ack_buf, 0, 2);
 8000be6:	f107 0318 	add.w	r3, r7, #24
 8000bea:	2202      	movs	r2, #2
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f9c0 	bl	8000f74 <memset>
 8000bf4:	e008      	b.n	8000c08 <main+0x164>
		} else {
			//invalide ack
			assert_error();
 8000bf6:	f000 f92b 	bl	8000e50 <assert_error>
			memset(ack_buf, 0, 2);
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	2202      	movs	r2, #2
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f9b6 	bl	8000f74 <memset>
		}

		/* NOW send the data stream */
		hal_spi_master_tx(&SpiHandle, master_write_data, DATA_LENGTH);
 8000c08:	2204      	movs	r2, #4
 8000c0a:	493b      	ldr	r1, [pc, #236]	; (8000cf8 <main+0x254>)
 8000c0c:	4835      	ldr	r0, [pc, #212]	; (8000ce4 <main+0x240>)
 8000c0e:	f7ff fc60 	bl	80004d2 <hal_spi_master_tx>
		while (SpiHandle.State != HAL_SPI_STATE_READY)
 8000c12:	bf00      	nop
 8000c14:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <main+0x240>)
 8000c16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d1fa      	bne.n	8000c14 <main+0x170>
			;
		delay_gen();
 8000c1e:	f000 f871 	bl	8000d04 <delay_gen>

		//	read from slave

		/* Master READ command */
		addcm[0] = (uint8_t) CMD_MASTER_READ;
 8000c22:	2334      	movs	r3, #52	; 0x34
 8000c24:	773b      	strb	r3, [r7, #28]
		addcm[1] = (uint8_t) ( CMD_MASTER_READ >> 8);
 8000c26:	2312      	movs	r3, #18
 8000c28:	777b      	strb	r3, [r7, #29]

		/* first send the master write cmd to slave */
		hal_spi_master_tx(&SpiHandle, addcm, CMD_LENGTH);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	2202      	movs	r2, #2
 8000c30:	4619      	mov	r1, r3
 8000c32:	482c      	ldr	r0, [pc, #176]	; (8000ce4 <main+0x240>)
 8000c34:	f7ff fc4d 	bl	80004d2 <hal_spi_master_tx>

		/* application can block here, or can do other task untill above tx finishes */
		while (SpiHandle.State != HAL_SPI_STATE_READY)
 8000c38:	bf00      	nop
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <main+0x240>)
 8000c3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d1fa      	bne.n	8000c3a <main+0x196>
			;

		/* this dealy helps for the slave to be ready with the ACK bytes */
		delay_gen();
 8000c44:	f000 f85e 	bl	8000d04 <delay_gen>

		/* read back the ACK bytes from the slave */
		hal_spi_master_rx(&SpiHandle, ack_buf, ACK_LEN);
 8000c48:	f107 0318 	add.w	r3, r7, #24
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4824      	ldr	r0, [pc, #144]	; (8000ce4 <main+0x240>)
 8000c52:	f7ff fc67 	bl	8000524 <hal_spi_master_rx>

		while (SpiHandle.State != HAL_SPI_STATE_READY)
 8000c56:	bf00      	nop
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <main+0x240>)
 8000c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d1fa      	bne.n	8000c58 <main+0x1b4>
			;

		if (ack_buf[1] == 0XE5 && ack_buf[0] == 0xD5) {
 8000c62:	7e7b      	ldrb	r3, [r7, #25]
 8000c64:	2be5      	cmp	r3, #229	; 0xe5
 8000c66:	d10e      	bne.n	8000c86 <main+0x1e2>
 8000c68:	7e3b      	ldrb	r3, [r7, #24]
 8000c6a:	2bd5      	cmp	r3, #213	; 0xd5
 8000c6c:	d10b      	bne.n	8000c86 <main+0x1e2>
			//correct ack
			led_toggle(GPIOC, LED_BLUE);
 8000c6e:	2107      	movs	r1, #7
 8000c70:	4820      	ldr	r0, [pc, #128]	; (8000cf4 <main+0x250>)
 8000c72:	f000 f88b 	bl	8000d8c <led_toggle>
			memset(ack_buf, 0, 2); //what the hell??
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f978 	bl	8000f74 <memset>
 8000c84:	e008      	b.n	8000c98 <main+0x1f4>
		} else {
			//invalide ack
			assert_error();
 8000c86:	f000 f8e3 	bl	8000e50 <assert_error>
			memset(ack_buf, 0, 2); //what the hell??
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	2202      	movs	r2, #2
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f96e 	bl	8000f74 <memset>
		}

		/* start receiving from the slave */
		hal_spi_master_rx(&SpiHandle, master_read_buffer, DATA_LENGTH);
 8000c98:	2204      	movs	r2, #4
 8000c9a:	4918      	ldr	r1, [pc, #96]	; (8000cfc <main+0x258>)
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <main+0x240>)
 8000c9e:	f7ff fc41 	bl	8000524 <hal_spi_master_rx>

		while (SpiHandle.State != HAL_SPI_STATE_READY)
 8000ca2:	bf00      	nop
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <main+0x240>)
 8000ca6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d1fa      	bne.n	8000ca4 <main+0x200>
			;

		/* compare the data rcvd form slave, with what slave supposed to send */
		if (Buffercmp(master_read_buffer, slave_reply_data, DATA_LENGTH)) {
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4913      	ldr	r1, [pc, #76]	; (8000d00 <main+0x25c>)
 8000cb2:	4812      	ldr	r0, [pc, #72]	; (8000cfc <main+0x258>)
 8000cb4:	f000 f8d8 	bl	8000e68 <Buffercmp>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d004      	beq.n	8000cc8 <main+0x224>
			// we didnt rcv what needs to be rcvd !!! Error !
			led_toggle(GPIOI, LED_RED);
 8000cbe:	2109      	movs	r1, #9
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <main+0x248>)
 8000cc2:	f000 f863 	bl	8000d8c <led_toggle>
 8000cc6:	e003      	b.n	8000cd0 <main+0x22c>
		} else {
			//Rcvd correct data
			led_toggle(GPIOC, LED_BLUE);
 8000cc8:	2107      	movs	r1, #7
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <main+0x250>)
 8000ccc:	f000 f85e 	bl	8000d8c <led_toggle>
		}

		delay_gen();
 8000cd0:	f000 f818 	bl	8000d04 <delay_gen>
		while (SpiHandle.State != HAL_SPI_STATE_READY)
 8000cd4:	e757      	b.n	8000b86 <main+0xe2>
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40021800 	.word	0x40021800
 8000ce0:	40013800 	.word	0x40013800
 8000ce4:	20000030 	.word	0x20000030
 8000ce8:	40003800 	.word	0x40003800
 8000cec:	40022000 	.word	0x40022000
 8000cf0:	20000028 	.word	0x20000028
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	2000002c 	.word	0x2000002c
 8000d00:	20000000 	.word	0x20000000

08000d04 <delay_gen>:
	}
}


void delay_gen(void) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
	uint32_t cnt = 800000;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <delay_gen+0x24>)
 8000d0c:	607b      	str	r3, [r7, #4]
	while (cnt--)
 8000d0e:	bf00      	nop
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	1e5a      	subs	r2, r3, #1
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1fa      	bne.n	8000d10 <delay_gen+0xc>
		;
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	000c3500 	.word	0x000c3500

08000d2c <led_init>:

void led_init(void){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOI_CLK_ENABLE();
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <led_init+0x54>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <led_init+0x54>)
 8000d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf.pin = LED_RED;
 8000d3e:	2309      	movs	r3, #9
 8000d40:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_OUTPUT_MODE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
	hal_gpio_init(GPIOI,&gpio_pin_conf);
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	480b      	ldr	r0, [pc, #44]	; (8000d84 <led_init+0x58>)
 8000d58:	f7ff fdd7 	bl	800090a <hal_gpio_init>

	_HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <led_init+0x54>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <led_init+0x54>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf.pin = LED_BLUE;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	603b      	str	r3, [r7, #0]
	hal_gpio_init(GPIOC, &gpio_pin_conf);
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <led_init+0x5c>)
 8000d72:	f7ff fdca 	bl	800090a <hal_gpio_init>

}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40022000 	.word	0x40022000
 8000d88:	40020800 	.word	0x40020800

08000d8c <led_toggle>:

void led_toggle(GPIO_TypeDef *GPIOx, uint16_t pin) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
	if (hal_gpio_read_from_pin(GPIOx, pin))
 8000d98:	887b      	ldrh	r3, [r7, #2]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fd7c 	bl	800089a <hal_gpio_read_from_pin>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <led_toggle+0x2a>
		hal_gpio_write_to_pin(GPIOx, pin, 0);
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fd87 	bl	80008c2 <hal_gpio_write_to_pin>
	else
		hal_gpio_write_to_pin(GPIOx, pin, 1);
}
 8000db4:	e005      	b.n	8000dc2 <led_toggle+0x36>
		hal_gpio_write_to_pin(GPIOx, pin, 1);
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	2201      	movs	r2, #1
 8000dba:	4619      	mov	r1, r3
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fd80 	bl	80008c2 <hal_gpio_write_to_pin>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <spi_gpio_init>:

void spi_gpio_init(void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOI_CLK_ENABLE();
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <spi_gpio_init+0x7c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <spi_gpio_init+0x7c>)
 8000dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30

	/* configure GPIOI_PIN_1 for SPI CLK functionality */
	gpio_pin_conf.pin = SPI_CLK_PIN;
 8000dde:	2301      	movs	r3, #1
 8000de0:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_ALT_FUN_MODE;
 8000de2:	2302      	movs	r3, #2
 8000de4:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_PUSH_DOWN;
 8000dea:	2302      	movs	r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8000dee:	2301      	movs	r3, #1
 8000df0:	613b      	str	r3, [r7, #16]

	hal_gpio_set_alt_function(GPIOI, SPI_CLK_PIN, GPIO_PIN_AF5_SPI2);
 8000df2:	2205      	movs	r2, #5
 8000df4:	2101      	movs	r1, #1
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <spi_gpio_init+0x80>)
 8000df8:	f7ff fd28 	bl	800084c <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOI,&gpio_pin_conf);
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4812      	ldr	r0, [pc, #72]	; (8000e4c <spi_gpio_init+0x80>)
 8000e02:	f7ff fd82 	bl	800090a <hal_gpio_init>

	/* configure GPIOI_PIN_2 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MISO_PIN;
 8000e06:	2302      	movs	r3, #2
 8000e08:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOI, SPI_MISO_PIN, GPIO_PIN_AF5_SPI2);
 8000e0e:	2205      	movs	r2, #5
 8000e10:	2102      	movs	r1, #2
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <spi_gpio_init+0x80>)
 8000e14:	f7ff fd1a 	bl	800084c <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOI, &gpio_pin_conf);
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <spi_gpio_init+0x80>)
 8000e1e:	f7ff fd74 	bl	800090a <hal_gpio_init>

	/* configure GPIOI_PIN_3 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MOSI_PIN;
 8000e22:	2303      	movs	r3, #3
 8000e24:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOI, SPI_MOSI_PIN, GPIO_PIN_AF5_SPI2);
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	2103      	movs	r1, #3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <spi_gpio_init+0x80>)
 8000e30:	f7ff fd0c 	bl	800084c <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOI, &gpio_pin_conf);
 8000e34:	463b      	mov	r3, r7
 8000e36:	4619      	mov	r1, r3
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <spi_gpio_init+0x80>)
 8000e3a:	f7ff fd66 	bl	800090a <hal_gpio_init>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40022000 	.word	0x40022000

08000e50 <assert_error>:

void assert_error(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	while (1) {
		led_toggle(GPIOI, LED_RED);
 8000e54:	2109      	movs	r1, #9
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <assert_error+0x14>)
 8000e58:	f7ff ff98 	bl	8000d8c <led_toggle>
		delay_gen();
 8000e5c:	f7ff ff52 	bl	8000d04 <delay_gen>
		led_toggle(GPIOI, LED_RED);
 8000e60:	e7f8      	b.n	8000e54 <assert_error+0x4>
 8000e62:	bf00      	nop
 8000e64:	40022000 	.word	0x40022000

08000e68 <Buffercmp>:
	}
}

static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	4613      	mov	r3, r2
 8000e74:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8000e76:	e00d      	b.n	8000e94 <Buffercmp+0x2c>
  {
    if((*pBuffer1) != *pBuffer2)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d001      	beq.n	8000e88 <Buffercmp+0x20>
    {
      return BufferLength;
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	e00b      	b.n	8000ea0 <Buffercmp+0x38>
    }
    pBuffer1++;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	80fa      	strh	r2, [r7, #6]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1ec      	bne.n	8000e78 <Buffercmp+0x10>
  }
	return 0;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
	...

08000eac <EXTI15_10_IRQHandler>:
/*
 * @brief  brief  This function handles EXTI15-10 interrupt request.
 * @param  none
 * @retval none
 */
void EXTI15_10_IRQHandler(void){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	hal_gpio_clear_interrupt(GPIO_BUTTON_PIN);
 8000eb0:	200f      	movs	r0, #15
 8000eb2:	f7ff fdbb 	bl	8000a2c <hal_gpio_clear_interrupt>
	TestReady = SET;
 8000eb6:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <EXTI15_10_IRQHandler+0x14>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000028 	.word	0x20000028

08000ec4 <SPI2_IRQHandler>:
/*
 * @brief  This function handles SPI2 interrupt request.
 * @param  none
 * @retval none
 */
void SPI2_IRQHandler(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	/* call the driver api to process this interrupt */
	hal_spi_irq_handler(&SpiHandle);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <SPI2_IRQHandler+0x10>)
 8000eca:	f7ff fc09 	bl	80006e0 <hal_spi_irq_handler>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000030 	.word	0x20000030

08000ed8 <Reset_Handler>:
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <LoopForever+0x2>)
 8000eda:	4685      	mov	sp, r0
 8000edc:	f3af 8000 	nop.w
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <LoopForever+0x6>)
 8000ee2:	490d      	ldr	r1, [pc, #52]	; (8000f18 <LoopForever+0xa>)
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <LoopForever+0xe>)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:
 8000eea:	58d4      	ldr	r4, [r2, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:
 8000ef0:	18c4      	adds	r4, r0, r3
 8000ef2:	428c      	cmp	r4, r1
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <LoopForever+0x12>)
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	; (8000f24 <LoopForever+0x16>)
 8000efa:	2300      	movs	r3, #0
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:
 8000f02:	42a2      	cmp	r2, r4
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>
 8000f06:	f000 f811 	bl	8000f2c <__libc_init_array>
 8000f0a:	f7ff fdcb 	bl	8000aa4 <main>

08000f0e <LoopForever>:
 8000f0e:	e7fe      	b.n	8000f0e <LoopForever>
 8000f10:	20020000 	.word	0x20020000
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	08000fa4 	.word	0x08000fa4
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000068 	.word	0x20000068

08000f28 <ADC_IRQHandler>:
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <__libc_init_array>:
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	2600      	movs	r6, #0
 8000f30:	4d0c      	ldr	r5, [pc, #48]	; (8000f64 <__libc_init_array+0x38>)
 8000f32:	4c0d      	ldr	r4, [pc, #52]	; (8000f68 <__libc_init_array+0x3c>)
 8000f34:	1b64      	subs	r4, r4, r5
 8000f36:	10a4      	asrs	r4, r4, #2
 8000f38:	42a6      	cmp	r6, r4
 8000f3a:	d109      	bne.n	8000f50 <__libc_init_array+0x24>
 8000f3c:	f000 f822 	bl	8000f84 <_init>
 8000f40:	2600      	movs	r6, #0
 8000f42:	4d0a      	ldr	r5, [pc, #40]	; (8000f6c <__libc_init_array+0x40>)
 8000f44:	4c0a      	ldr	r4, [pc, #40]	; (8000f70 <__libc_init_array+0x44>)
 8000f46:	1b64      	subs	r4, r4, r5
 8000f48:	10a4      	asrs	r4, r4, #2
 8000f4a:	42a6      	cmp	r6, r4
 8000f4c:	d105      	bne.n	8000f5a <__libc_init_array+0x2e>
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f54:	4798      	blx	r3
 8000f56:	3601      	adds	r6, #1
 8000f58:	e7ee      	b.n	8000f38 <__libc_init_array+0xc>
 8000f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f5e:	4798      	blx	r3
 8000f60:	3601      	adds	r6, #1
 8000f62:	e7f2      	b.n	8000f4a <__libc_init_array+0x1e>
 8000f64:	08000f9c 	.word	0x08000f9c
 8000f68:	08000f9c 	.word	0x08000f9c
 8000f6c:	08000f9c 	.word	0x08000f9c
 8000f70:	08000fa0 	.word	0x08000fa0

08000f74 <memset>:
 8000f74:	4603      	mov	r3, r0
 8000f76:	4402      	add	r2, r0
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d100      	bne.n	8000f7e <memset+0xa>
 8000f7c:	4770      	bx	lr
 8000f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8000f82:	e7f9      	b.n	8000f78 <memset+0x4>

08000f84 <_init>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	bf00      	nop
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr

08000f90 <_fini>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr
