
My_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b18  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c9c  08000ca4  00010ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c9c  08000c9c  00010ca4  2**0
                  CONTENTS
  4 .ARM          00000000  08000c9c  08000c9c  00010ca4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c9c  08000ca4  00010ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c9c  08000c9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ca0  08000ca0  00010ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000ca4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000ca4  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ca4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d56  00000000  00000000  00010ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c4  00000000  00000000  00012a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  000130e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  000132b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001765a  00000000  00000000  00013450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001647  00000000  00000000  0002aaaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b42  00000000  00000000  0002c0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aec33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e0  00000000  00000000  000aec88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000c84 	.word	0x08000c84

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	08000c84 	.word	0x08000c84

080001c4 <hal_spi_configure_phase_and_polarity>:
 * @param  phase : configures phase ,
 * @param  polarity : configures polarity
 * @retval None
 */
void hal_spi_configure_phase_and_polarity(SPI_TypeDef *SPIx,
		uint32_t phase_value, uint32_t polarity) {
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	607a      	str	r2, [r7, #4]
	if (phase_value) {
 80001d0:	68bb      	ldr	r3, [r7, #8]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d006      	beq.n	80001e4 <hal_spi_configure_phase_and_polarity+0x20>
		SPIx->CR1 |= SPI_REG_CR1_CPHA;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f043 0201 	orr.w	r2, r3, #1
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	e005      	b.n	80001f0 <hal_spi_configure_phase_and_polarity+0x2c>
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_CPHA;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f023 0201 	bic.w	r2, r3, #1
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	601a      	str	r2, [r3, #0]
	}
	if (polarity) {
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d006      	beq.n	8000204 <hal_spi_configure_phase_and_polarity+0x40>
		SPIx->CR1 |= SPI_REG_CR1_CPOL;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0202 	orr.w	r2, r3, #2
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_CPOL;
	}
}
 8000202:	e005      	b.n	8000210 <hal_spi_configure_phase_and_polarity+0x4c>
		SPIx->CR1 &= ~SPI_REG_CR1_CPOL;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f023 0202 	bic.w	r2, r3, #2
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	601a      	str	r2, [r3, #0]
}
 8000210:	bf00      	nop
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr

0800021a <hal_spi_configure_device_mode>:
 * @brief  Configures master or slave mode
 * @param  *SPIx : Base address of the SPI
 * @param  master : if 1 , then configured for master
 * @retval None
 */
void hal_spi_configure_device_mode(SPI_TypeDef *SPIx, uint32_t master) {
 800021a:	b480      	push	{r7}
 800021c:	b083      	sub	sp, #12
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
 8000222:	6039      	str	r1, [r7, #0]
	if (master) {
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d006      	beq.n	8000238 <hal_spi_configure_device_mode+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_MSTR;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0204 	orr.w	r2, r3, #4
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_MSTR;
	}
}
 8000236:	e005      	b.n	8000244 <hal_spi_configure_device_mode+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_MSTR;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f023 0204 	bic.w	r2, r3, #4
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	601a      	str	r2, [r3, #0]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr

0800024e <hal_spi_configure_datasize>:
 * @param  datasize : data size to be configured  ,
 * @param  lsbmsbfirst : if 1, LSB will be sent first.
 * @retval None
 */
void hal_spi_configure_datasize(SPI_TypeDef *SPIx, uint32_t datasize_16,
		uint32_t lsbfirst) {
 800024e:	b480      	push	{r7}
 8000250:	b085      	sub	sp, #20
 8000252:	af00      	add	r7, sp, #0
 8000254:	60f8      	str	r0, [r7, #12]
 8000256:	60b9      	str	r1, [r7, #8]
 8000258:	607a      	str	r2, [r7, #4]
	if (datasize_16) {
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d006      	beq.n	800026e <hal_spi_configure_datasize+0x20>
		SPIx->CR1 |= SPI_REG_CR1_DFF;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	e005      	b.n	800027a <hal_spi_configure_datasize+0x2c>
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_DFF;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]
	}
	if (lsbfirst) {
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d006      	beq.n	800028e <hal_spi_configure_datasize+0x40>
		SPIx->CR1 |= SPI_CR1_LSBFIRST;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_CR1_LSBFIRST;
	}
}
 800028c:	e005      	b.n	800029a <hal_spi_configure_datasize+0x4c>
		SPIx->CR1 &= ~SPI_CR1_LSBFIRST;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <hal_spi_configure_nss_master>:
 * @brief  Configures the NSS pin of the master
 * @param  *SPIx : Base address of the SPI
 * @param  ssm_enable : enable or disable software chip select
 * @retval None
 */
void hal_spi_configure_nss_master(SPI_TypeDef *SPIx, uint32_t ssm_enable) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
	if (ssm_enable) {
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d00c      	beq.n	80002ce <hal_spi_configure_nss_master+0x2a>
		SPIx->CR1 |= SPI_REG_CR1_SSM;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	601a      	str	r2, [r3, #0]
		SPIx->CR1 |= SPI_REG_CR1_SSI;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
	}
}
 80002cc:	e005      	b.n	80002da <hal_spi_configure_nss_master+0x36>
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <hal_spi_configure_nss_slave>:
 * @brief  Configures the NSS pin of the slave
 * @param  *SPIx : Base address of the SPI
 * @param  ssm_enable : enable or disable software chip select
 * @retval None
 */
void hal_spi_configure_nss_slave(SPI_TypeDef *SPIx, uint32_t ssm_enable) {
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
	if (ssm_enable) {
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d006      	beq.n	8000302 <hal_spi_configure_nss_slave+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_SSM;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
	}

}
 8000300:	e005      	b.n	800030e <hal_spi_configure_nss_slave+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr

08000318 <hal_spi_configure_baudrate>:
 * @brief  Configures SPI baudrate
 * @param  *SPIx : Base address of the SPI
 * @param  pre_scalar_value : pre scalar value to be used to generate baudrate
 * @retval None
 */
void hal_spi_configure_baudrate(SPI_TypeDef *SPIx, uint32_t pre_scalar_value) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	if (pre_scalar_value > 7)
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b07      	cmp	r3, #7
 8000326:	d904      	bls.n	8000332 <hal_spi_configure_baudrate+0x1a>
		SPIx->CR1 |= (0x00 << 3); //if pre_scalar_value > 7,then use default . that is 0
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	601a      	str	r2, [r3, #0]
	else
		SPIx->CR1 |= (pre_scalar_value << 3);
}
 8000330:	e006      	b.n	8000340 <hal_spi_configure_baudrate+0x28>
		SPIx->CR1 |= (pre_scalar_value << 3);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	00db      	lsls	r3, r3, #3
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr

0800034a <hal_spi_configure_direction>:
 * @brief  Configures SPI direction
 * @param  *SPIx : Base address of the SPI
 * @param  direction : if 1, direction will be single line bi-directional else, 2 lines uni directional
 * @retval None
 */
void hal_spi_configure_direction(SPI_TypeDef *SPIx, uint32_t direction) {
 800034a:	b480      	push	{r7}
 800034c:	b083      	sub	sp, #12
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
 8000352:	6039      	str	r1, [r7, #0]
	if (direction) {
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d006      	beq.n	8000368 <hal_spi_configure_direction+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_BIDIMODE;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_BIDIMODE;
	}
}
 8000366:	e005      	b.n	8000374 <hal_spi_configure_direction+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_BIDIMODE;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	601a      	str	r2, [r3, #0]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr

0800037e <hal_spi_disable_txe_interrupt>:
/*
 * @brief  Disables the Tx buffer empty interrupt (TXE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_disable_txe_interrupt(SPI_TypeDef *SPIx) {
 800037e:	b480      	push	{r7}
 8000380:	b083      	sub	sp, #12
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	SPIx->CR2 &= ~SPI_REG_CR2_TXEIE_ENABLE;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	605a      	str	r2, [r3, #4]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <hal_spi_disable_rxne_interrupt>:
/*
 * @brief  Disables the RX buffer non empty interrupt (RXNE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_disable_rxne_interrupt(SPI_TypeDef *SPIx) {
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	SPIx->CR2 &= ~SPI_REG_CR2_RXNEIE_ENABLE;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	605a      	str	r2, [r3, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <hal_spi_init>:
/*
 * @brief  API used to do initialize the given SPI device
 * @param  *spi_handle : Pointer to SPI init structure
 * @retval void
 */
void hal_spi_init(spi_handle_t *spi_handle) {
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	/* configure the phase and polartiy */
	hal_spi_configure_phase_and_polarity(spi_handle->Instance,
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6818      	ldr	r0, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6959      	ldr	r1, [r3, #20]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	691b      	ldr	r3, [r3, #16]
 80003ce:	461a      	mov	r2, r3
 80003d0:	f7ff fef8 	bl	80001c4 <hal_spi_configure_phase_and_polarity>
			spi_handle->Init.CLKPhase, spi_handle->Init.CLKPolarity);

	/* Configure the spi device mode */
	hal_spi_configure_device_mode(spi_handle->Instance, spi_handle->Init.Mode);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	4619      	mov	r1, r3
 80003de:	4610      	mov	r0, r2
 80003e0:	f7ff ff1b 	bl	800021a <hal_spi_configure_device_mode>

	/* Configure the spi data size */
	hal_spi_configure_datasize(spi_handle->Instance, spi_handle->Init.DataSize,
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6818      	ldr	r0, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68d9      	ldr	r1, [r3, #12]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	6a1b      	ldr	r3, [r3, #32]
 80003f0:	461a      	mov	r2, r3
 80003f2:	f7ff ff2c 	bl	800024e <hal_spi_configure_datasize>
			spi_handle->Init.FirstBit);

	/* Configure the slave select line */
	if (spi_handle->Init.Mode == SPI_MASTER_MODE_SEL)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d108      	bne.n	8000410 <hal_spi_init+0x56>
		hal_spi_configure_nss_master(spi_handle->Instance,
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4619      	mov	r1, r3
 8000408:	4610      	mov	r0, r2
 800040a:	f7ff ff4b 	bl	80002a4 <hal_spi_configure_nss_master>
 800040e:	e007      	b.n	8000420 <hal_spi_init+0x66>
				spi_handle->Init.NSS);
	else
		hal_spi_configure_nss_slave(spi_handle->Instance, spi_handle->Init.NSS);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4619      	mov	r1, r3
 800041a:	4610      	mov	r0, r2
 800041c:	f7ff ff62 	bl	80002e4 <hal_spi_configure_nss_slave>

	/* Configure the  SPI deivce speed */
	hal_spi_configure_baudrate(spi_handle->Instance,
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	4619      	mov	r1, r3
 800042a:	4610      	mov	r0, r2
 800042c:	f7ff ff74 	bl	8000318 <hal_spi_configure_baudrate>
			spi_handle->Init.BaudRatePrescaler);

	/* Configure the SPI device direction */
	hal_spi_configure_direction(spi_handle->Instance,
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f7ff ff85 	bl	800034a <hal_spi_configure_direction>
			spi_handle->Init.Direction);
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <hal_spi_is_bus_busy>:
/*
 * @brief  Checks whether bus is free or busy
 * @param  *SPIx : Base address of the SPI
 * @retval return 1, if bus is busy
 */
uint8_t hal_spi_is_bus_busy(SPI_TypeDef *SPIx) {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	if (SPIx->SR & SPI_REG_SR_BUSY_FLAG) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <hal_spi_is_bus_busy+0x18>
		return SPI_IS_BUSY;
 800045c:	2301      	movs	r3, #1
 800045e:	e000      	b.n	8000462 <hal_spi_is_bus_busy+0x1a>
	} else
		return SPI_IS_NOT_BUSY;
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <hal_spi_tx_close_interrupt>:
 * @brief   close Tx transfer
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_tx_close_interrupt(spi_handle_t *hspi) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	/* Disable TXE interrupt */
	hal_spi_disable_txe_interrupt(hspi->Instance);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff80 	bl	800037e <hal_spi_disable_txe_interrupt>

	/* if master and if driver state is not HAL_SPI_STATE_BUSY_RX then make state = READY */
	if (hspi->Init.Mode && (hspi->State != HAL_SPI_STATE_BUSY_RX))
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d008      	beq.n	8000498 <hal_spi_tx_close_interrupt+0x2c>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800048c:	2b22      	cmp	r3, #34	; 0x22
 800048e:	d003      	beq.n	8000498 <hal_spi_tx_close_interrupt+0x2c>
		hspi->State = HAL_SPI_STATE_READY;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2201      	movs	r2, #1
 8000494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <hal_spi_handle_tx_interrupt>:
 *               the configuration information for SPI module.
 * @retval void
 */


void hal_spi_handle_tx_interrupt(spi_handle_t *hspi) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	if (hspi->Init.DataSize == SPI_8BIT_DF_ENABLE) { /* Transmit data in 8 Bit mode */
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d10f      	bne.n	80004d0 <hal_spi_handle_tx_interrupt+0x30>
		hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b4:	1c59      	adds	r1, r3, #1
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	6251      	str	r1, [r2, #36]	; 0x24
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	60da      	str	r2, [r3, #12]
		hspi->TxXferCount--; //we sent 1 byte
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80004c6:	3b01      	subs	r3, #1
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80004ce:	e010      	b.n	80004f2 <hal_spi_handle_tx_interrupt+0x52>
	} else { /* Transmit data in 16 Bit mode */
		hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d4:	881a      	ldrh	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	60da      	str	r2, [r3, #12]
		hspi->pTxBuffPtr += 2;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e0:	1c9a      	adds	r2, r3, #2
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	625a      	str	r2, [r3, #36]	; 0x24
		hspi->TxXferCount -= 2; //we sent 2 bytes in one go
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80004ea:	3b02      	subs	r3, #2
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	855a      	strh	r2, [r3, #42]	; 0x2a
	}
	if (hspi->TxXferCount == 0) /* we reached end of transmission, so close the txe interrupt */
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d102      	bne.n	8000500 <hal_spi_handle_tx_interrupt+0x60>
		hal_spi_tx_close_interrupt(hspi);
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f7ff ffb6 	bl	800046c <hal_spi_tx_close_interrupt>

}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <hal_spi_close_rx_interrupt>:
 * @brief   close Rx transfer
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_close_rx_interrupt(spi_handle_t *hspi) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	while (hal_spi_is_bus_busy(hspi->Instance))
 8000510:	bf00      	nop
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff96 	bl	8000448 <hal_spi_is_bus_busy>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1f7      	bne.n	8000512 <hal_spi_close_rx_interrupt+0xa>
		; /* Disable RXNE interrupt */

	hal_spi_disable_rxne_interrupt(hspi->Instance);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ff38 	bl	800039c <hal_spi_disable_rxne_interrupt>
	hspi->State = HAL_SPI_STATE_READY;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2201      	movs	r2, #1
 8000530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <hal_spi_handle_rx_interrupt>:
 * @brief   handles  RXNE interrupt
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_handle_rx_interrupt(spi_handle_t *hspi) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	if (hspi->Init.DataSize == SPI_8BIT_DF_ENABLE) { /* Receive data in 8 Bit mode */
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d114      	bne.n	8000576 <hal_spi_handle_rx_interrupt+0x3a>

		if (hspi->pRxBuffPtr) //NULL check
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000550:	2b00      	cmp	r3, #0
 8000552:	d009      	beq.n	8000568 <hal_spi_handle_rx_interrupt+0x2c>
			(*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	68d8      	ldr	r0, [r3, #12]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055e:	1c59      	adds	r1, r3, #1
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000564:	b2c2      	uxtb	r2, r0
 8000566:	701a      	strb	r2, [r3, #0]
		hspi->RxXferCount--;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800056c:	3b01      	subs	r3, #1
 800056e:	b29a      	uxth	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	865a      	strh	r2, [r3, #50]	; 0x32
 8000574:	e011      	b.n	800059a <hal_spi_handle_rx_interrupt+0x5e>
	} else { /* Receive data in 16 Bit mode */
		*((uint16_t*) hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68da      	ldr	r2, [r3, #12]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000580:	b292      	uxth	r2, r2
 8000582:	801a      	strh	r2, [r3, #0]
		hspi->pRxBuffPtr += 2;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000588:	1c9a      	adds	r2, r3, #2
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi->RxXferCount -= 2;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000592:	3b02      	subs	r3, #2
 8000594:	b29a      	uxth	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	865a      	strh	r2, [r3, #50]	; 0x32
	}

	if (hspi->RxXferCount == 0) { /*We are done with the Rxing of data, lets close the rxne interrupt */
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d102      	bne.n	80005a8 <hal_spi_handle_rx_interrupt+0x6c>
		hal_spi_close_rx_interrupt(hspi);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ffb0 	bl	8000508 <hal_spi_close_rx_interrupt>
	}
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <hal_spi_irq_handler>:
 * @brief  This function handles SPI interrupt request.
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval none
 */
void hal_spi_irq_handler(spi_handle_t *hspi) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0, tmp2 = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]

	/* check to see RXNE is set in the status register */
	tmp1 = (hspi->Instance->SR & SPI_REG_SR_RXNE_FLAG);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
	/* check whether RXNEIE bit is enabled in the control register. */
	tmp2 = (hspi->Instance->CR2 & SPI_REG_CR2_RXNEIE_ENABLE);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d6:	60bb      	str	r3, [r7, #8]

	if ((tmp1 != RESET) && (tmp2 != RESET)) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d006      	beq.n	80005ec <hal_spi_irq_handler+0x3c>
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <hal_spi_irq_handler+0x3c>
		/* RXNE flag is set
		 * handle the RX of data bytes
		 */
		hal_spi_handle_rx_interrupt(hspi);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ffa9 	bl	800053c <hal_spi_handle_rx_interrupt>
		return;
 80005ea:	e015      	b.n	8000618 <hal_spi_irq_handler+0x68>
	}

	/* check to see TXE is set in the status register */
	tmp1 = (hspi->Instance->SR & SPI_REG_SR_TXE_FLAG);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
	tmp2 = (hspi->Instance->CR2 & SPI_REG_CR2_TXEIE_ENABLE);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	60bb      	str	r3, [r7, #8]

	if ((tmp1 != RESET) && (tmp2 != RESET)) {
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <hal_spi_irq_handler+0x68>
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <hal_spi_irq_handler+0x68>
		/* TXE flag is set
		 * handle the TX of data bytes
		 */
		hal_spi_handle_tx_interrupt(hspi);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ff45 	bl	80004a0 <hal_spi_handle_tx_interrupt>
		return;
 8000616:	bf00      	nop
	}

}
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db0b      	blt.n	800064a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 021f 	and.w	r2, r3, #31
 8000638:	4906      	ldr	r1, [pc, #24]	; (8000654 <__NVIC_EnableIRQ+0x34>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	2001      	movs	r0, #1
 8000642:	fa00 f202 	lsl.w	r2, r0, r2
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100

08000658 <hal_gpio_configure_pin_mode>:
 * @param	mode			: mode to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_mode(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t mode) {
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	460b      	mov	r3, r1
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	817b      	strh	r3, [r7, #10]
	GPIOx->MODER &= (0x03 << (2 * pin_no));
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	897a      	ldrh	r2, [r7, #10]
 800066c:	0052      	lsls	r2, r2, #1
 800066e:	2103      	movs	r1, #3
 8000670:	fa01 f202 	lsl.w	r2, r1, r2
 8000674:	401a      	ands	r2, r3
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << (2 * pin_no));
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	897b      	ldrh	r3, [r7, #10]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	fa01 f303 	lsl.w	r3, r1, r3
 8000688:	431a      	orrs	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <hal_gpio_configure_pin_otype>:
 * @param	op_type			: output type to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_otype(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t op_type) {
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	460b      	mov	r3, r1
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	817b      	strh	r3, [r7, #10]
	GPIOx->OTYPER |= (op_type << (pin_no));
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	897b      	ldrh	r3, [r7, #10]
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	431a      	orrs	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	605a      	str	r2, [r3, #4]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <hal_gpio_configure_pin_speed>:
 * @param	speed			: speed to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_speed(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t speed) {
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	460b      	mov	r3, r1
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	817b      	strh	r3, [r7, #10]
	GPIOx->OSPEEDR |= (speed << (2 * pin_no));
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	897b      	ldrh	r3, [r7, #10]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	431a      	orrs	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	609a      	str	r2, [r3, #8]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <hal_gpio_configure_pin_resistor>:
 * @param	resistor		: pull up, push down, nothing
 * @retval	void
 */

static void hal_gpio_configure_pin_resistor(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t resistor) {
 80006ee:	b480      	push	{r7}
 80006f0:	b085      	sub	sp, #20
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	460b      	mov	r3, r1
 80006f8:	607a      	str	r2, [r7, #4]
 80006fa:	817b      	strh	r3, [r7, #10]
	GPIOx->PUPDR |= (resistor << (2 * pin_no));
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	68da      	ldr	r2, [r3, #12]
 8000700:	897b      	ldrh	r3, [r7, #10]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	431a      	orrs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	60da      	str	r2, [r3, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <hal_gpio_set_alt_function>:
 * @param	pin_no			: GPIO pin number
 * @param	alt_fun_value	: alternate function to be configured
 * @retval	void
 */
void hal_gpio_set_alt_function(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint16_t alt_fun_value) {
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	460b      	mov	r3, r1
 8000724:	807b      	strh	r3, [r7, #2]
 8000726:	4613      	mov	r3, r2
 8000728:	803b      	strh	r3, [r7, #0]
	if (pin_no <= 7)
 800072a:	887b      	ldrh	r3, [r7, #2]
 800072c:	2b07      	cmp	r3, #7
 800072e:	d80a      	bhi.n	8000746 <hal_gpio_set_alt_function+0x2c>
		GPIOx->AFR[0] |= (alt_fun_value << (4 * pin_no));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	8839      	ldrh	r1, [r7, #0]
 8000736:	887a      	ldrh	r2, [r7, #2]
 8000738:	0092      	lsls	r2, r2, #2
 800073a:	fa01 f202 	lsl.w	r2, r1, r2
 800073e:	431a      	orrs	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	621a      	str	r2, [r3, #32]
	else
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
}
 8000744:	e00b      	b.n	800075e <hal_gpio_set_alt_function+0x44>
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	8839      	ldrh	r1, [r7, #0]
 800074c:	887a      	ldrh	r2, [r7, #2]
 800074e:	f002 0207 	and.w	r2, r2, #7
 8000752:	0092      	lsls	r2, r2, #2
 8000754:	fa01 f202 	lsl.w	r2, r1, r2
 8000758:	431a      	orrs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <hal_gpio_read_from_pin>:
 * @param	*GPIOx 			: pointer to GPIO Port base address
 * @param	pin_no			: GPIO pin number
 * @retval	uint8_t			: Value read
 */

uint8_t hal_gpio_read_from_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no) {
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	807b      	strh	r3, [r7, #2]
	return (uint8_t)((GPIOx->IDR >> pin_no) & 0x00000001);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	691a      	ldr	r2, [r3, #16]
 8000778:	887b      	ldrh	r3, [r7, #2]
 800077a:	fa22 f303 	lsr.w	r3, r2, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <hal_gpio_write_to_pin>:
 * @param	pin_no			: GPIO pin number
 * @param	value			: value to write
 * @retval	void
 */

void hal_gpio_write_to_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint8_t value) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
 800079c:	4613      	mov	r3, r2
 800079e:	707b      	strb	r3, [r7, #1]
	if (value)
 80007a0:	787b      	ldrb	r3, [r7, #1]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d009      	beq.n	80007ba <hal_gpio_write_to_pin+0x2a>
		GPIOx->ODR |= (1 << pin_no);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	887a      	ldrh	r2, [r7, #2]
 80007ac:	2101      	movs	r1, #1
 80007ae:	fa01 f202 	lsl.w	r2, r1, r2
 80007b2:	431a      	orrs	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	615a      	str	r2, [r3, #20]
	else
		GPIOx->ODR &= ~(1 << pin_no);
}
 80007b8:	e009      	b.n	80007ce <hal_gpio_write_to_pin+0x3e>
		GPIOx->ODR &= ~(1 << pin_no);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	887a      	ldrh	r2, [r7, #2]
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	43d2      	mvns	r2, r2
 80007c8:	401a      	ands	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	615a      	str	r2, [r3, #20]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <hal_gpio_init>:

void hal_gpio_init(GPIO_TypeDef *GPIOx, gpio_pin_conf_t *gpio_pin_conf) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]

	hal_gpio_configure_pin_mode(GPIOx, gpio_pin_conf->pin, gpio_pin_conf->mode); // set pin mode from input structure
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	b299      	uxth	r1, r3
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	461a      	mov	r2, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff32 	bl	8000658 <hal_gpio_configure_pin_mode>
	hal_gpio_configure_pin_otype(GPIOx, gpio_pin_conf->pin,
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	b299      	uxth	r1, r3
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	461a      	mov	r2, r3
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff49 	bl	8000698 <hal_gpio_configure_pin_otype>
			gpio_pin_conf->op_type);
	hal_gpio_configure_pin_resistor(GPIOx, gpio_pin_conf->pin,
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	b299      	uxth	r1, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	461a      	mov	r2, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ff6b 	bl	80006ee <hal_gpio_configure_pin_resistor>
			gpio_pin_conf->pull);
	hal_gpio_configure_pin_speed(GPIOx, gpio_pin_conf->pin,
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	b299      	uxth	r1, r3
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	461a      	mov	r2, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ff4c 	bl	80006c2 <hal_gpio_configure_pin_speed>
			gpio_pin_conf->speed);

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <hal_gpio_configure_interrupt>:

void hal_gpio_configure_interrupt(uint16_t pin_no, int_edge_sel_t edge_sel) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	80fb      	strh	r3, [r7, #6]
 8000840:	4613      	mov	r3, r2
 8000842:	717b      	strb	r3, [r7, #5]


	EXTI->FTSR &= ~(1 << pin_no);
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	88fa      	ldrh	r2, [r7, #6]
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	43d2      	mvns	r2, r2
 8000852:	4611      	mov	r1, r2
 8000854:	4a19      	ldr	r2, [pc, #100]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 8000856:	400b      	ands	r3, r1
 8000858:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1 << pin_no);
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	43d2      	mvns	r2, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 800086c:	400b      	ands	r3, r1
 800086e:	6093      	str	r3, [r2, #8]
	if ((edge_sel == INT_FALLING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 8000870:	797b      	ldrb	r3, [r7, #5]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d002      	beq.n	800087c <hal_gpio_configure_interrupt+0x48>
 8000876:	797b      	ldrb	r3, [r7, #5]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d109      	bne.n	8000890 <hal_gpio_configure_interrupt+0x5c>
		EXTI->FTSR |= (1 << pin_no);
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	88fa      	ldrh	r2, [r7, #6]
 8000882:	2101      	movs	r1, #1
 8000884:	fa01 f202 	lsl.w	r2, r1, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 800088c:	430b      	orrs	r3, r1
 800088e:	60d3      	str	r3, [r2, #12]
	if ((edge_sel == INT_RISING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 8000890:	797b      	ldrb	r3, [r7, #5]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <hal_gpio_configure_interrupt+0x68>
 8000896:	797b      	ldrb	r3, [r7, #5]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d109      	bne.n	80008b0 <hal_gpio_configure_interrupt+0x7c>
		EXTI->RTSR |= (1 << pin_no);
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	2101      	movs	r1, #1
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6093      	str	r3, [r2, #8]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40013c00 	.word	0x40013c00

080008c0 <hal_gpio_enable_interrupt>:

void hal_gpio_enable_interrupt(uint16_t pin_no,IRQn_Type irq_no){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	80fb      	strh	r3, [r7, #6]
 80008cc:	4613      	mov	r3, r2
 80008ce:	717b      	strb	r3, [r7, #5]

	EXTI->IMR |= (1 << pin_no);
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <hal_gpio_enable_interrupt+0x38>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	88fa      	ldrh	r2, [r7, #6]
 80008d6:	2101      	movs	r1, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <hal_gpio_enable_interrupt+0x38>)
 80008e0:	430b      	orrs	r3, r1
 80008e2:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq_no);
 80008e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe99 	bl	8000620 <__NVIC_EnableIRQ>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40013c00 	.word	0x40013c00

080008fc <hal_gpio_clear_interrupt>:

void hal_gpio_clear_interrupt(uint16_t pin_no) {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
	if (EXTI->PR & (1 << pin_no))
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <hal_gpio_clear_interrupt+0x3c>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	88fa      	ldrh	r2, [r7, #6]
 800090c:	2101      	movs	r1, #1
 800090e:	fa01 f202 	lsl.w	r2, r1, r2
 8000912:	4013      	ands	r3, r2
 8000914:	2b00      	cmp	r3, #0
 8000916:	d009      	beq.n	800092c <hal_gpio_clear_interrupt+0x30>
		EXTI->PR |= (1 << pin_no);
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <hal_gpio_clear_interrupt+0x3c>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	88fa      	ldrh	r2, [r7, #6]
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <hal_gpio_clear_interrupt+0x3c>)
 8000928:	430b      	orrs	r3, r1
 800092a:	6153      	str	r3, [r2, #20]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40013c00 	.word	0x40013c00

0800093c <__NVIC_EnableIRQ>:
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4906      	ldr	r1, [pc, #24]	; (8000970 <__NVIC_EnableIRQ+0x34>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100

08000974 <main>:


int main(void)


{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
	uint32_t i=0;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t addcm[CMD_LENGTH];
	uint8_t ack_buf[2];

	spi_gpio_init();
 800097e:	f000 f8db 	bl	8000b38 <spi_gpio_init>


	led_init();  										// configure LED
 8000982:	f000 f889 	bl	8000a98 <led_init>


	/* Configure USER Button as ext interrupt throw EXTI15 */

	_HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <main+0xe0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a32      	ldr	r2, [pc, #200]	; (8000a54 <main+0xe0>)
 800098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf_t gpio_pin_conf;
	gpio_pin_conf.pin = GPIO_BUTTON_PIN;
 8000992:	230f      	movs	r3, #15
 8000994:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.mode = GPIO_PIN_INPUT_MODE;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 80009a2:	2301      	movs	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
	hal_gpio_init(GPIO_BUTTON_PORT,&gpio_pin_conf);
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4619      	mov	r1, r3
 80009aa:	482b      	ldr	r0, [pc, #172]	; (8000a58 <main+0xe4>)
 80009ac:	f7ff ff14 	bl	80007d8 <hal_gpio_init>

	RCC->APB2ENR |= (1 << 14);
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <main+0xe0>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b4:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <main+0xe0>)
 80009b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ba:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[3] &= (0b1111 << 12);
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <main+0xe8>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	4a26      	ldr	r2, [pc, #152]	; (8000a5c <main+0xe8>)
 80009c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80009c6:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= (0b0110 << 12);
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <main+0xe8>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <main+0xe8>)
 80009ce:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80009d2:	6153      	str	r3, [r2, #20]
	hal_gpio_configure_interrupt(GPIO_BUTTON_PIN, INT_FALLING_EDGE);
 80009d4:	2101      	movs	r1, #1
 80009d6:	200f      	movs	r0, #15
 80009d8:	f7ff ff2c 	bl	8000834 <hal_gpio_configure_interrupt>
	hal_gpio_enable_interrupt(GPIO_BUTTON_PIN, EXTI15_10_IRQn);
 80009dc:	2128      	movs	r1, #40	; 0x28
 80009de:	200f      	movs	r0, #15
 80009e0:	f7ff ff6e 	bl	80008c0 <hal_gpio_enable_interrupt>

	_HAL_RCC_SPI2_CLK_ENABLE();
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <main+0xe0>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a1a      	ldr	r2, [pc, #104]	; (8000a54 <main+0xe0>)
 80009ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40


	/*fill up the SPI handle structure */
	SpiHandle.Instance				= SPI_2;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <main+0xec>)
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <main+0xf0>)
 80009f4:	601a      	str	r2, [r3, #0]

	SpiHandle.Init.BaudRatePrescaler = SPI_REG_CR1_BR_PCLK_DIV_32;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <main+0xec>)
 80009f8:	2220      	movs	r2, #32
 80009fa:	61da      	str	r2, [r3, #28]
	SpiHandle.Init.Direction         = SPI_ENABLE_2_LINE_UNI_DIR;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <main+0xec>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
	SpiHandle.Init.CLKPhase          = SPI_SECOND_CLOCK_TRANS;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <main+0xec>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	615a      	str	r2, [r3, #20]
	SpiHandle.Init.CLKPolarity       = SPI_CPOL_LOW;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <main+0xec>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
	SpiHandle.Init.DataSize          = SPI_8BIT_DF_ENABLE;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <main+0xec>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
	SpiHandle.Init.FirstBit          = SPI_MSB_FIRST;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <main+0xec>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
	SpiHandle.Init.NSS               = SPI_SSM_ENABLE;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <main+0xec>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	619a      	str	r2, [r3, #24]
	SpiHandle.Init.Mode              = SPI_MASTER_MODE_SEL;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <main+0xec>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	605a      	str	r2, [r3, #4]

	SpiHandle.State = HAL_SPI_STATE_READY;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <main+0xec>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Call driver API to initialize the SPI device */
	hal_spi_init(&SpiHandle);
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <main+0xec>)
 8000a30:	f7ff fcc3 	bl	80003ba <hal_spi_init>

	/* Enable the IRQs in the NVIC */
	NVIC_EnableIRQ(SPI2_IRQn);
 8000a34:	2024      	movs	r0, #36	; 0x24
 8000a36:	f7ff ff81 	bl	800093c <__NVIC_EnableIRQ>

	/* Wait for user Button press before starting the communication. Toggles LED_ORANGE until then */
	while (TestReady != SET) {
 8000a3a:	e005      	b.n	8000a48 <main+0xd4>
		led_toggle(GPIOI, LED_RED);
 8000a3c:	2109      	movs	r1, #9
 8000a3e:	480a      	ldr	r0, [pc, #40]	; (8000a68 <main+0xf4>)
 8000a40:	f000 f85a 	bl	8000af8 <led_toggle>
		//LED3 (orange)
		delay_gen();
 8000a44:	f000 f814 	bl	8000a70 <delay_gen>
	while (TestReady != SET) {
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <main+0xf8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d1f5      	bne.n	8000a3c <main+0xc8>
	}

	while (1)
 8000a50:	e7fe      	b.n	8000a50 <main+0xdc>
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40021800 	.word	0x40021800
 8000a5c:	40013800 	.word	0x40013800
 8000a60:	20000024 	.word	0x20000024
 8000a64:	40003800 	.word	0x40003800
 8000a68:	40022000 	.word	0x40022000
 8000a6c:	2000001c 	.word	0x2000001c

08000a70 <delay_gen>:
		;
}


void delay_gen(void) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
	uint32_t cnt = 800000;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <delay_gen+0x24>)
 8000a78:	607b      	str	r3, [r7, #4]
	while (cnt--)
 8000a7a:	bf00      	nop
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	1e5a      	subs	r2, r3, #1
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1fa      	bne.n	8000a7c <delay_gen+0xc>
		;
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	000c3500 	.word	0x000c3500

08000a98 <led_init>:

void led_init(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOI_CLK_ENABLE();
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <led_init+0x54>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <led_init+0x54>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf.pin = LED_RED;
 8000aaa:	2309      	movs	r3, #9
 8000aac:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_OUTPUT_MODE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8000aba:	2301      	movs	r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
	hal_gpio_init(GPIOI,&gpio_pin_conf);
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <led_init+0x58>)
 8000ac4:	f7ff fe88 	bl	80007d8 <hal_gpio_init>

	_HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <led_init+0x54>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <led_init+0x54>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf.pin = LED_BLUE;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	603b      	str	r3, [r7, #0]
	hal_gpio_init(GPIOC, &gpio_pin_conf);
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <led_init+0x5c>)
 8000ade:	f7ff fe7b 	bl	80007d8 <hal_gpio_init>

}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40022000 	.word	0x40022000
 8000af4:	40020800 	.word	0x40020800

08000af8 <led_toggle>:

void led_toggle(GPIO_TypeDef *GPIOx, uint16_t pin) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
	if (hal_gpio_read_from_pin(GPIOx, pin))
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	4619      	mov	r1, r3
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fe2d 	bl	8000768 <hal_gpio_read_from_pin>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d006      	beq.n	8000b22 <led_toggle+0x2a>
		hal_gpio_write_to_pin(GPIOx, pin, 0);
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	2200      	movs	r2, #0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fe38 	bl	8000790 <hal_gpio_write_to_pin>
	else
		hal_gpio_write_to_pin(GPIOx, pin, 1);
}
 8000b20:	e005      	b.n	8000b2e <led_toggle+0x36>
		hal_gpio_write_to_pin(GPIOx, pin, 1);
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4619      	mov	r1, r3
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fe31 	bl	8000790 <hal_gpio_write_to_pin>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <spi_gpio_init>:

void spi_gpio_init(void){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOI_CLK_ENABLE();
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <spi_gpio_init+0x7c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <spi_gpio_init+0x7c>)
 8000b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30

	/* configure GPIOB_PIN_13 for SPI CLK functionality */
	gpio_pin_conf.pin = SPI_CLK_PIN;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_ALT_FUN_MODE;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_PUSH_DOWN;
 8000b56:	2302      	movs	r3, #2
 8000b58:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]

	hal_gpio_set_alt_function(GPIOI, SPI_CLK_PIN, GPIO_PIN_AF5_SPI2);
 8000b5e:	2205      	movs	r2, #5
 8000b60:	2101      	movs	r1, #1
 8000b62:	4815      	ldr	r0, [pc, #84]	; (8000bb8 <spi_gpio_init+0x80>)
 8000b64:	f7ff fdd9 	bl	800071a <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOI,&gpio_pin_conf);
 8000b68:	463b      	mov	r3, r7
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <spi_gpio_init+0x80>)
 8000b6e:	f7ff fe33 	bl	80007d8 <hal_gpio_init>

	/* configure GPIOB_PIN_14 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MISO_PIN;
 8000b72:	2302      	movs	r3, #2
 8000b74:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOI, SPI_MISO_PIN, GPIO_PIN_AF5_SPI2);
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <spi_gpio_init+0x80>)
 8000b80:	f7ff fdcb 	bl	800071a <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOI, &gpio_pin_conf);
 8000b84:	463b      	mov	r3, r7
 8000b86:	4619      	mov	r1, r3
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <spi_gpio_init+0x80>)
 8000b8a:	f7ff fe25 	bl	80007d8 <hal_gpio_init>

	/* configure GPIOB_PIN_15 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MOSI_PIN;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOI, SPI_MOSI_PIN, GPIO_PIN_AF5_SPI2);
 8000b96:	2205      	movs	r2, #5
 8000b98:	2103      	movs	r1, #3
 8000b9a:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <spi_gpio_init+0x80>)
 8000b9c:	f7ff fdbd 	bl	800071a <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOI, &gpio_pin_conf);
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <spi_gpio_init+0x80>)
 8000ba6:	f7ff fe17 	bl	80007d8 <hal_gpio_init>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40022000 	.word	0x40022000

08000bbc <EXTI15_10_IRQHandler>:
/*
 * @brief  brief  This function handles EXTI15-10 interrupt request.
 * @param  none
 * @retval none
 */
void EXTI15_10_IRQHandler(void){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	hal_gpio_clear_interrupt(GPIO_BUTTON_PIN);
 8000bc0:	200f      	movs	r0, #15
 8000bc2:	f7ff fe9b 	bl	80008fc <hal_gpio_clear_interrupt>
	TestReady = SET;
 8000bc6:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <EXTI15_10_IRQHandler+0x14>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000001c 	.word	0x2000001c

08000bd4 <SPI2_IRQHandler>:
/*
 * @brief  This function handles SPI2 interrupt request.
 * @param  none
 * @retval none
 */
void SPI2_IRQHandler(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	/* call the driver api to process this interrupt */
	hal_spi_irq_handler(&SpiHandle);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <SPI2_IRQHandler+0x10>)
 8000bda:	f7ff fce9 	bl	80005b0 <hal_spi_irq_handler>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000024 	.word	0x20000024

08000be8 <Reset_Handler>:
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopForever+0x2>)
 8000bea:	4685      	mov	sp, r0
 8000bec:	f3af 8000 	nop.w
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <LoopForever+0x6>)
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <LoopForever+0xa>)
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <LoopForever+0xe>)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:
 8000bfa:	58d4      	ldr	r4, [r2, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:
 8000c00:	18c4      	adds	r4, r0, r3
 8000c02:	428c      	cmp	r4, r1
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopForever+0x12>)
 8000c08:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <LoopForever+0x16>)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:
 8000c12:	42a2      	cmp	r2, r4
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>
 8000c16:	f000 f811 	bl	8000c3c <__libc_init_array>
 8000c1a:	f7ff feab 	bl	8000974 <main>

08000c1e <LoopForever>:
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
 8000c20:	20020000 	.word	0x20020000
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	08000ca4 	.word	0x08000ca4
 8000c30:	20000000 	.word	0x20000000
 8000c34:	2000005c 	.word	0x2000005c

08000c38 <ADC_IRQHandler>:
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <__libc_init_array>:
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	2600      	movs	r6, #0
 8000c40:	4d0c      	ldr	r5, [pc, #48]	; (8000c74 <__libc_init_array+0x38>)
 8000c42:	4c0d      	ldr	r4, [pc, #52]	; (8000c78 <__libc_init_array+0x3c>)
 8000c44:	1b64      	subs	r4, r4, r5
 8000c46:	10a4      	asrs	r4, r4, #2
 8000c48:	42a6      	cmp	r6, r4
 8000c4a:	d109      	bne.n	8000c60 <__libc_init_array+0x24>
 8000c4c:	f000 f81a 	bl	8000c84 <_init>
 8000c50:	2600      	movs	r6, #0
 8000c52:	4d0a      	ldr	r5, [pc, #40]	; (8000c7c <__libc_init_array+0x40>)
 8000c54:	4c0a      	ldr	r4, [pc, #40]	; (8000c80 <__libc_init_array+0x44>)
 8000c56:	1b64      	subs	r4, r4, r5
 8000c58:	10a4      	asrs	r4, r4, #2
 8000c5a:	42a6      	cmp	r6, r4
 8000c5c:	d105      	bne.n	8000c6a <__libc_init_array+0x2e>
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c64:	4798      	blx	r3
 8000c66:	3601      	adds	r6, #1
 8000c68:	e7ee      	b.n	8000c48 <__libc_init_array+0xc>
 8000c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c6e:	4798      	blx	r3
 8000c70:	3601      	adds	r6, #1
 8000c72:	e7f2      	b.n	8000c5a <__libc_init_array+0x1e>
 8000c74:	08000c9c 	.word	0x08000c9c
 8000c78:	08000c9c 	.word	0x08000c9c
 8000c7c:	08000c9c 	.word	0x08000c9c
 8000c80:	08000ca0 	.word	0x08000ca0

08000c84 <_init>:
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c86:	bf00      	nop
 8000c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8a:	bc08      	pop	{r3}
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	4770      	bx	lr

08000c90 <_fini>:
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	bf00      	nop
 8000c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c96:	bc08      	pop	{r3}
 8000c98:	469e      	mov	lr, r3
 8000c9a:	4770      	bx	lr
