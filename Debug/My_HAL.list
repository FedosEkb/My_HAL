
My_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bec  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001d70  08001d70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001d70  08001d70  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001d70  08001d70  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d70  08001d70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d74  08001d74  00011d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000010  08001d88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08001d88  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039b6  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bad  00000000  00000000  000239ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a0  00000000  00000000  000245a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000348  00000000  00000000  00024940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185f8  00000000  00000000  00024c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e50  00000000  00000000  0003d280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008732c  00000000  00000000  000400d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c73fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ed8  00000000  00000000  000c7450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000010 	.word	0x20000010
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001d58 	.word	0x08001d58

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000014 	.word	0x20000014
 80001c0:	08001d58 	.word	0x08001d58

080001c4 <hal_spi_configure_phase_and_polarity>:
 * @param  phase : configures phase ,
 * @param  polarity : configures polarity
 * @retval None
 */
void hal_spi_configure_phase_and_polarity(SPI_TypeDef *SPIx,
		uint32_t phase_value, uint32_t polarity) {
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	607a      	str	r2, [r7, #4]
	if (phase_value) {
 80001d0:	68bb      	ldr	r3, [r7, #8]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d006      	beq.n	80001e4 <hal_spi_configure_phase_and_polarity+0x20>
		SPIx->CR1 |= SPI_REG_CR1_CPHA;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f043 0201 	orr.w	r2, r3, #1
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	e005      	b.n	80001f0 <hal_spi_configure_phase_and_polarity+0x2c>
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_CPHA;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f023 0201 	bic.w	r2, r3, #1
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	601a      	str	r2, [r3, #0]
	}
	if (polarity) {
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d006      	beq.n	8000204 <hal_spi_configure_phase_and_polarity+0x40>
		SPIx->CR1 |= SPI_REG_CR1_CPOL;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0202 	orr.w	r2, r3, #2
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_CPOL;
	}
}
 8000202:	e005      	b.n	8000210 <hal_spi_configure_phase_and_polarity+0x4c>
		SPIx->CR1 &= ~SPI_REG_CR1_CPOL;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f023 0202 	bic.w	r2, r3, #2
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	601a      	str	r2, [r3, #0]
}
 8000210:	bf00      	nop
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr

0800021a <hal_spi_configure_device_mode>:
 * @brief  Configures master or slave mode
 * @param  *SPIx : Base address of the SPI
 * @param  master : if 1 , then configured for master
 * @retval None
 */
void hal_spi_configure_device_mode(SPI_TypeDef *SPIx, uint32_t master) {
 800021a:	b480      	push	{r7}
 800021c:	b083      	sub	sp, #12
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
 8000222:	6039      	str	r1, [r7, #0]
	if (master) {
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d006      	beq.n	8000238 <hal_spi_configure_device_mode+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_MSTR;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0204 	orr.w	r2, r3, #4
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_MSTR;
	}
}
 8000236:	e005      	b.n	8000244 <hal_spi_configure_device_mode+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_MSTR;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f023 0204 	bic.w	r2, r3, #4
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	601a      	str	r2, [r3, #0]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr

0800024e <hal_spi_configure_datasize>:
 * @param  datasize : data size to be configured  ,
 * @param  lsbmsbfirst : if 1, LSB will be sent first.
 * @retval None
 */
void hal_spi_configure_datasize(SPI_TypeDef *SPIx, uint32_t datasize_16,
		uint32_t lsbfirst) {
 800024e:	b480      	push	{r7}
 8000250:	b085      	sub	sp, #20
 8000252:	af00      	add	r7, sp, #0
 8000254:	60f8      	str	r0, [r7, #12]
 8000256:	60b9      	str	r1, [r7, #8]
 8000258:	607a      	str	r2, [r7, #4]
	if (datasize_16) {
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d006      	beq.n	800026e <hal_spi_configure_datasize+0x20>
		SPIx->CR1 |= SPI_REG_CR1_DFF;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	e005      	b.n	800027a <hal_spi_configure_datasize+0x2c>
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_DFF;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]
	}
	if (lsbfirst) {
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d006      	beq.n	800028e <hal_spi_configure_datasize+0x40>
		SPIx->CR1 |= SPI_CR1_LSBFIRST;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_CR1_LSBFIRST;
	}
}
 800028c:	e005      	b.n	800029a <hal_spi_configure_datasize+0x4c>
		SPIx->CR1 &= ~SPI_CR1_LSBFIRST;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <hal_spi_configure_nss_master>:
 * @brief  Configures the NSS pin of the master
 * @param  *SPIx : Base address of the SPI
 * @param  ssm_enable : enable or disable software chip select
 * @retval None
 */
void hal_spi_configure_nss_master(SPI_TypeDef *SPIx, uint32_t ssm_enable) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
	if (ssm_enable) {
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d00c      	beq.n	80002ce <hal_spi_configure_nss_master+0x2a>
		SPIx->CR1 |= SPI_REG_CR1_SSM;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	601a      	str	r2, [r3, #0]
		SPIx->CR1 |= SPI_REG_CR1_SSI;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
	}
}
 80002cc:	e005      	b.n	80002da <hal_spi_configure_nss_master+0x36>
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <hal_spi_configure_nss_slave>:
 * @brief  Configures the NSS pin of the slave
 * @param  *SPIx : Base address of the SPI
 * @param  ssm_enable : enable or disable software chip select
 * @retval None
 */
void hal_spi_configure_nss_slave(SPI_TypeDef *SPIx, uint32_t ssm_enable) {
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
	if (ssm_enable) {
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d006      	beq.n	8000302 <hal_spi_configure_nss_slave+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_SSM;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
	}

}
 8000300:	e005      	b.n	800030e <hal_spi_configure_nss_slave+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr

08000318 <hal_spi_configure_baudrate>:
 * @brief  Configures SPI baudrate
 * @param  *SPIx : Base address of the SPI
 * @param  pre_scalar_value : pre scalar value to be used to generate baudrate
 * @retval None
 */
void hal_spi_configure_baudrate(SPI_TypeDef *SPIx, uint32_t pre_scalar_value) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	if (pre_scalar_value > 7)
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b07      	cmp	r3, #7
 8000326:	d904      	bls.n	8000332 <hal_spi_configure_baudrate+0x1a>
		SPIx->CR1 |= (0x00 << 3); //if pre_scalar_value > 7,then use default . that is 0
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	601a      	str	r2, [r3, #0]
	else
		SPIx->CR1 |= (pre_scalar_value << 3);
}
 8000330:	e006      	b.n	8000340 <hal_spi_configure_baudrate+0x28>
		SPIx->CR1 |= (pre_scalar_value << 3);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	00db      	lsls	r3, r3, #3
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr

0800034a <hal_spi_configure_direction>:
 * @brief  Configures SPI direction
 * @param  *SPIx : Base address of the SPI
 * @param  direction : if 1, direction will be single line bi-directional else, 2 lines uni directional
 * @retval None
 */
void hal_spi_configure_direction(SPI_TypeDef *SPIx, uint32_t direction) {
 800034a:	b480      	push	{r7}
 800034c:	b083      	sub	sp, #12
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
 8000352:	6039      	str	r1, [r7, #0]
	if (direction) {
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d006      	beq.n	8000368 <hal_spi_configure_direction+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_BIDIMODE;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_BIDIMODE;
	}
}
 8000366:	e005      	b.n	8000374 <hal_spi_configure_direction+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_BIDIMODE;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	601a      	str	r2, [r3, #0]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr

0800037e <hal_spi_disable_txe_interrupt>:
/*
 * @brief  Disables the Tx buffer empty interrupt (TXE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_disable_txe_interrupt(SPI_TypeDef *SPIx) {
 800037e:	b480      	push	{r7}
 8000380:	b083      	sub	sp, #12
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	SPIx->CR2 &= ~SPI_REG_CR2_TXEIE_ENABLE;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	605a      	str	r2, [r3, #4]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <hal_spi_disable_rxne_interrupt>:
/*
 * @brief  Disables the RX buffer non empty interrupt (RXNE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_disable_rxne_interrupt(SPI_TypeDef *SPIx) {
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	SPIx->CR2 &= ~SPI_REG_CR2_RXNEIE_ENABLE;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	605a      	str	r2, [r3, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <hal_spi_init>:
/*
 * @brief  API used to do initialize the given SPI device
 * @param  *spi_handle : Pointer to SPI init structure
 * @retval void
 */
void hal_spi_init(spi_handle_t *spi_handle) {
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	/* configure the phase and polartiy */
	hal_spi_configure_phase_and_polarity(spi_handle->Instance,
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6818      	ldr	r0, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6959      	ldr	r1, [r3, #20]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	691b      	ldr	r3, [r3, #16]
 80003ce:	461a      	mov	r2, r3
 80003d0:	f7ff fef8 	bl	80001c4 <hal_spi_configure_phase_and_polarity>
			spi_handle->Init.CLKPhase, spi_handle->Init.CLKPolarity);

	/* Configure the spi device mode */
	hal_spi_configure_device_mode(spi_handle->Instance, spi_handle->Init.Mode);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	4619      	mov	r1, r3
 80003de:	4610      	mov	r0, r2
 80003e0:	f7ff ff1b 	bl	800021a <hal_spi_configure_device_mode>

	/* Configure the spi data size */
	hal_spi_configure_datasize(spi_handle->Instance, spi_handle->Init.DataSize,
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6818      	ldr	r0, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68d9      	ldr	r1, [r3, #12]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	6a1b      	ldr	r3, [r3, #32]
 80003f0:	461a      	mov	r2, r3
 80003f2:	f7ff ff2c 	bl	800024e <hal_spi_configure_datasize>
			spi_handle->Init.FirstBit);

	/* Configure the slave select line */
	if (spi_handle->Init.Mode == SPI_MASTER_MODE_SEL)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d108      	bne.n	8000410 <hal_spi_init+0x56>
		hal_spi_configure_nss_master(spi_handle->Instance,
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4619      	mov	r1, r3
 8000408:	4610      	mov	r0, r2
 800040a:	f7ff ff4b 	bl	80002a4 <hal_spi_configure_nss_master>
 800040e:	e007      	b.n	8000420 <hal_spi_init+0x66>
				spi_handle->Init.NSS);
	else
		hal_spi_configure_nss_slave(spi_handle->Instance, spi_handle->Init.NSS);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4619      	mov	r1, r3
 800041a:	4610      	mov	r0, r2
 800041c:	f7ff ff62 	bl	80002e4 <hal_spi_configure_nss_slave>

	/* Configure the  SPI deivce speed */
	hal_spi_configure_baudrate(spi_handle->Instance,
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	4619      	mov	r1, r3
 800042a:	4610      	mov	r0, r2
 800042c:	f7ff ff74 	bl	8000318 <hal_spi_configure_baudrate>
			spi_handle->Init.BaudRatePrescaler);

	/* Configure the SPI device direction */
	hal_spi_configure_direction(spi_handle->Instance,
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f7ff ff85 	bl	800034a <hal_spi_configure_direction>
			spi_handle->Init.Direction);
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <hal_spi_is_bus_busy>:
/*
 * @brief  Checks whether bus is free or busy
 * @param  *SPIx : Base address of the SPI
 * @retval return 1, if bus is busy
 */
uint8_t hal_spi_is_bus_busy(SPI_TypeDef *SPIx) {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	if (SPIx->SR & SPI_REG_SR_BUSY_FLAG) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <hal_spi_is_bus_busy+0x18>
		return SPI_IS_BUSY;
 800045c:	2301      	movs	r3, #1
 800045e:	e000      	b.n	8000462 <hal_spi_is_bus_busy+0x1a>
	} else
		return SPI_IS_NOT_BUSY;
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <hal_spi_tx_close_interrupt>:
 * @brief   close Tx transfer
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_tx_close_interrupt(spi_handle_t *hspi) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	/* Disable TXE interrupt */
	hal_spi_disable_txe_interrupt(hspi->Instance);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff80 	bl	800037e <hal_spi_disable_txe_interrupt>

	/* if master and if driver state is not HAL_SPI_STATE_BUSY_RX then make state = READY */
	if (hspi->Init.Mode && (hspi->State != HAL_SPI_STATE_BUSY_RX))
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d008      	beq.n	8000498 <hal_spi_tx_close_interrupt+0x2c>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800048c:	2b22      	cmp	r3, #34	; 0x22
 800048e:	d003      	beq.n	8000498 <hal_spi_tx_close_interrupt+0x2c>
		hspi->State = HAL_SPI_STATE_READY;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2201      	movs	r2, #1
 8000494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <hal_spi_handle_tx_interrupt>:
 *               the configuration information for SPI module.
 * @retval void
 */


void hal_spi_handle_tx_interrupt(spi_handle_t *hspi) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	if (hspi->Init.DataSize == SPI_8BIT_DF_ENABLE) { /* Transmit data in 8 Bit mode */
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d10f      	bne.n	80004d0 <hal_spi_handle_tx_interrupt+0x30>
		hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b4:	1c59      	adds	r1, r3, #1
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	6251      	str	r1, [r2, #36]	; 0x24
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	60da      	str	r2, [r3, #12]
		hspi->TxXferCount--; //we sent 1 byte
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80004c6:	3b01      	subs	r3, #1
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80004ce:	e010      	b.n	80004f2 <hal_spi_handle_tx_interrupt+0x52>
	} else { /* Transmit data in 16 Bit mode */
		hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d4:	881a      	ldrh	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	60da      	str	r2, [r3, #12]
		hspi->pTxBuffPtr += 2;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e0:	1c9a      	adds	r2, r3, #2
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	625a      	str	r2, [r3, #36]	; 0x24
		hspi->TxXferCount -= 2; //we sent 2 bytes in one go
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80004ea:	3b02      	subs	r3, #2
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	855a      	strh	r2, [r3, #42]	; 0x2a
	}
	if (hspi->TxXferCount == 0) /* we reached end of transmission, so close the txe interrupt */
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d102      	bne.n	8000500 <hal_spi_handle_tx_interrupt+0x60>
		hal_spi_tx_close_interrupt(hspi);
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f7ff ffb6 	bl	800046c <hal_spi_tx_close_interrupt>

}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <hal_spi_close_rx_interrupt>:
 * @brief   close Rx transfer
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_close_rx_interrupt(spi_handle_t *hspi) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	while (hal_spi_is_bus_busy(hspi->Instance))
 8000510:	bf00      	nop
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff96 	bl	8000448 <hal_spi_is_bus_busy>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1f7      	bne.n	8000512 <hal_spi_close_rx_interrupt+0xa>
		; /* Disable RXNE interrupt */

	hal_spi_disable_rxne_interrupt(hspi->Instance);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ff38 	bl	800039c <hal_spi_disable_rxne_interrupt>
	hspi->State = HAL_SPI_STATE_READY;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2201      	movs	r2, #1
 8000530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <hal_spi_handle_rx_interrupt>:
 * @brief   handles  RXNE interrupt
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_handle_rx_interrupt(spi_handle_t *hspi) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	if (hspi->Init.DataSize == SPI_8BIT_DF_ENABLE) { /* Receive data in 8 Bit mode */
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d114      	bne.n	8000576 <hal_spi_handle_rx_interrupt+0x3a>

		if (hspi->pRxBuffPtr) //NULL check
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000550:	2b00      	cmp	r3, #0
 8000552:	d009      	beq.n	8000568 <hal_spi_handle_rx_interrupt+0x2c>
			(*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	68d8      	ldr	r0, [r3, #12]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055e:	1c59      	adds	r1, r3, #1
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000564:	b2c2      	uxtb	r2, r0
 8000566:	701a      	strb	r2, [r3, #0]
		hspi->RxXferCount--;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800056c:	3b01      	subs	r3, #1
 800056e:	b29a      	uxth	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	865a      	strh	r2, [r3, #50]	; 0x32
 8000574:	e011      	b.n	800059a <hal_spi_handle_rx_interrupt+0x5e>
	} else { /* Receive data in 16 Bit mode */
		*((uint16_t*) hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68da      	ldr	r2, [r3, #12]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000580:	b292      	uxth	r2, r2
 8000582:	801a      	strh	r2, [r3, #0]
		hspi->pRxBuffPtr += 2;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000588:	1c9a      	adds	r2, r3, #2
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi->RxXferCount -= 2;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000592:	3b02      	subs	r3, #2
 8000594:	b29a      	uxth	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	865a      	strh	r2, [r3, #50]	; 0x32
	}

	if (hspi->RxXferCount == 0) { /*We are done with the Rxing of data, lets close the rxne interrupt */
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d102      	bne.n	80005a8 <hal_spi_handle_rx_interrupt+0x6c>
		hal_spi_close_rx_interrupt(hspi);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ffb0 	bl	8000508 <hal_spi_close_rx_interrupt>
	}
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <hal_spi_irq_handler>:
 * @brief  This function handles SPI interrupt request.
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval none
 */
void hal_spi_irq_handler(spi_handle_t *hspi) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0, tmp2 = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]

	/* check to see RXNE is set in the status register */
	tmp1 = (hspi->Instance->SR & SPI_REG_SR_RXNE_FLAG);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
	/* check whether RXNEIE bit is enabled in the control register. */
	tmp2 = (hspi->Instance->CR2 & SPI_REG_CR2_RXNEIE_ENABLE);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d6:	60bb      	str	r3, [r7, #8]

	if ((tmp1 != RESET) && (tmp2 != RESET)) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d006      	beq.n	80005ec <hal_spi_irq_handler+0x3c>
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <hal_spi_irq_handler+0x3c>
		/* RXNE flag is set
		 * handle the RX of data bytes
		 */
		hal_spi_handle_rx_interrupt(hspi);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ffa9 	bl	800053c <hal_spi_handle_rx_interrupt>
		return;
 80005ea:	e015      	b.n	8000618 <hal_spi_irq_handler+0x68>
	}

	/* check to see TXE is set in the status register */
	tmp1 = (hspi->Instance->SR & SPI_REG_SR_TXE_FLAG);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
	tmp2 = (hspi->Instance->CR2 & SPI_REG_CR2_TXEIE_ENABLE);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	60bb      	str	r3, [r7, #8]

	if ((tmp1 != RESET) && (tmp2 != RESET)) {
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <hal_spi_irq_handler+0x68>
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <hal_spi_irq_handler+0x68>
		/* TXE flag is set
		 * handle the TX of data bytes
		 */
		hal_spi_handle_tx_interrupt(hspi);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ff45 	bl	80004a0 <hal_spi_handle_tx_interrupt>
		return;
 8000616:	bf00      	nop
	}

}
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db0b      	blt.n	800064a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 021f 	and.w	r2, r3, #31
 8000638:	4906      	ldr	r1, [pc, #24]	; (8000654 <__NVIC_EnableIRQ+0x34>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	2001      	movs	r0, #1
 8000642:	fa00 f202 	lsl.w	r2, r0, r2
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100

08000658 <hal_gpio_configure_pin_mode>:
 * @param	mode			: mode to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_mode(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t mode) {
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	460b      	mov	r3, r1
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	817b      	strh	r3, [r7, #10]
	GPIOx->MODER &= ~(0x03 << (2 * pin_no));
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	897a      	ldrh	r2, [r7, #10]
 800066c:	0052      	lsls	r2, r2, #1
 800066e:	2103      	movs	r1, #3
 8000670:	fa01 f202 	lsl.w	r2, r1, r2
 8000674:	43d2      	mvns	r2, r2
 8000676:	401a      	ands	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << (2 * pin_no));
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	897b      	ldrh	r3, [r7, #10]
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	431a      	orrs	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <hal_gpio_configure_pin_otype>:
 * @param	op_type			: output type to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_otype(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t op_type) {
 800069a:	b480      	push	{r7}
 800069c:	b085      	sub	sp, #20
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	460b      	mov	r3, r1
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	817b      	strh	r3, [r7, #10]
	GPIOx->OTYPER |= (op_type << (pin_no));
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	685a      	ldr	r2, [r3, #4]
 80006ac:	897b      	ldrh	r3, [r7, #10]
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	fa01 f303 	lsl.w	r3, r1, r3
 80006b4:	431a      	orrs	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	605a      	str	r2, [r3, #4]
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <hal_gpio_configure_pin_speed>:
 * @param	speed			: speed to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_speed(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t speed) {
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	460b      	mov	r3, r1
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	817b      	strh	r3, [r7, #10]
	GPIOx->OSPEEDR |= (speed << (2 * pin_no));
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	897b      	ldrh	r3, [r7, #10]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	fa01 f303 	lsl.w	r3, r1, r3
 80006e0:	431a      	orrs	r2, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	609a      	str	r2, [r3, #8]
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <hal_gpio_configure_pin_resistor>:
 * @param	resistor		: pull up, push down, nothing
 * @retval	void
 */

static void hal_gpio_configure_pin_resistor(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t resistor) {
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	460b      	mov	r3, r1
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	817b      	strh	r3, [r7, #10]
	GPIOx->PUPDR |= (resistor << (2 * pin_no));
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	68da      	ldr	r2, [r3, #12]
 8000702:	897b      	ldrh	r3, [r7, #10]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	431a      	orrs	r2, r3
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	60da      	str	r2, [r3, #12]
}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <hal_gpio_set_alt_function>:
 * @param	pin_no			: GPIO pin number
 * @param	alt_fun_value	: alternate function to be configured
 * @retval	void
 */
void hal_gpio_set_alt_function(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint16_t alt_fun_value) {
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	807b      	strh	r3, [r7, #2]
 8000728:	4613      	mov	r3, r2
 800072a:	803b      	strh	r3, [r7, #0]
	if (pin_no <= 7)
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	2b07      	cmp	r3, #7
 8000730:	d80a      	bhi.n	8000748 <hal_gpio_set_alt_function+0x2c>
		GPIOx->AFR[0] |= (alt_fun_value << (4 * pin_no));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6a1b      	ldr	r3, [r3, #32]
 8000736:	8839      	ldrh	r1, [r7, #0]
 8000738:	887a      	ldrh	r2, [r7, #2]
 800073a:	0092      	lsls	r2, r2, #2
 800073c:	fa01 f202 	lsl.w	r2, r1, r2
 8000740:	431a      	orrs	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	621a      	str	r2, [r3, #32]
	else
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
}
 8000746:	e00b      	b.n	8000760 <hal_gpio_set_alt_function+0x44>
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074c:	8839      	ldrh	r1, [r7, #0]
 800074e:	887a      	ldrh	r2, [r7, #2]
 8000750:	f002 0207 	and.w	r2, r2, #7
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	431a      	orrs	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <hal_gpio_read_from_pin>:
 * @param	*GPIOx 			: pointer to GPIO Port base address
 * @param	pin_no			: GPIO pin number
 * @retval	uint8_t			: Value read
 */

uint8_t hal_gpio_read_from_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no) {
 800076a:	b480      	push	{r7}
 800076c:	b083      	sub	sp, #12
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	807b      	strh	r3, [r7, #2]
	return (uint8_t)((GPIOx->IDR >> pin_no) & 0x00000001);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	691a      	ldr	r2, [r3, #16]
 800077a:	887b      	ldrh	r3, [r7, #2]
 800077c:	fa22 f303 	lsr.w	r3, r2, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	b2db      	uxtb	r3, r3
}
 8000788:	4618      	mov	r0, r3
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <hal_gpio_write_to_pin>:
 * @param	pin_no			: GPIO pin number
 * @param	value			: value to write
 * @retval	void
 */

void hal_gpio_write_to_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint8_t value) {
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	807b      	strh	r3, [r7, #2]
 800079e:	4613      	mov	r3, r2
 80007a0:	707b      	strb	r3, [r7, #1]
	if (value)
 80007a2:	787b      	ldrb	r3, [r7, #1]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d009      	beq.n	80007bc <hal_gpio_write_to_pin+0x2a>
		GPIOx->ODR |= (1 << pin_no);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	887a      	ldrh	r2, [r7, #2]
 80007ae:	2101      	movs	r1, #1
 80007b0:	fa01 f202 	lsl.w	r2, r1, r2
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	615a      	str	r2, [r3, #20]
	else
		GPIOx->ODR &= ~(1 << pin_no);
}
 80007ba:	e009      	b.n	80007d0 <hal_gpio_write_to_pin+0x3e>
		GPIOx->ODR &= ~(1 << pin_no);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	887a      	ldrh	r2, [r7, #2]
 80007c2:	2101      	movs	r1, #1
 80007c4:	fa01 f202 	lsl.w	r2, r1, r2
 80007c8:	43d2      	mvns	r2, r2
 80007ca:	401a      	ands	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	615a      	str	r2, [r3, #20]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <hal_gpio_init>:

void hal_gpio_init(GPIO_TypeDef *GPIOx, gpio_pin_conf_t *gpio_pin_conf) {
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	6039      	str	r1, [r7, #0]

	hal_gpio_configure_pin_mode(GPIOx, gpio_pin_conf->pin, gpio_pin_conf->mode); // set pin mode from input structure
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	b299      	uxth	r1, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	461a      	mov	r2, r3
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff31 	bl	8000658 <hal_gpio_configure_pin_mode>
	hal_gpio_configure_pin_otype(GPIOx, gpio_pin_conf->pin,
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	b299      	uxth	r1, r3
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	461a      	mov	r2, r3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ff49 	bl	800069a <hal_gpio_configure_pin_otype>
			gpio_pin_conf->op_type);
	hal_gpio_configure_pin_resistor(GPIOx, gpio_pin_conf->pin,
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	b299      	uxth	r1, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	461a      	mov	r2, r3
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff6b 	bl	80006f0 <hal_gpio_configure_pin_resistor>
			gpio_pin_conf->pull);
	hal_gpio_configure_pin_speed(GPIOx, gpio_pin_conf->pin,
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	b299      	uxth	r1, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	461a      	mov	r2, r3
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ff4c 	bl	80006c4 <hal_gpio_configure_pin_speed>
			gpio_pin_conf->speed);

}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <hal_gpio_configure_interrupt>:

void hal_gpio_configure_interrupt(uint16_t pin_no, int_edge_sel_t edge_sel) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	80fb      	strh	r3, [r7, #6]
 8000840:	4613      	mov	r3, r2
 8000842:	717b      	strb	r3, [r7, #5]


	EXTI->FTSR &= ~(1 << pin_no);
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	88fa      	ldrh	r2, [r7, #6]
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	43d2      	mvns	r2, r2
 8000852:	4611      	mov	r1, r2
 8000854:	4a19      	ldr	r2, [pc, #100]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 8000856:	400b      	ands	r3, r1
 8000858:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1 << pin_no);
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	43d2      	mvns	r2, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 800086c:	400b      	ands	r3, r1
 800086e:	6093      	str	r3, [r2, #8]
	if ((edge_sel == INT_FALLING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 8000870:	797b      	ldrb	r3, [r7, #5]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d002      	beq.n	800087c <hal_gpio_configure_interrupt+0x48>
 8000876:	797b      	ldrb	r3, [r7, #5]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d109      	bne.n	8000890 <hal_gpio_configure_interrupt+0x5c>
		EXTI->FTSR |= (1 << pin_no);
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	88fa      	ldrh	r2, [r7, #6]
 8000882:	2101      	movs	r1, #1
 8000884:	fa01 f202 	lsl.w	r2, r1, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 800088c:	430b      	orrs	r3, r1
 800088e:	60d3      	str	r3, [r2, #12]
	if ((edge_sel == INT_RISING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 8000890:	797b      	ldrb	r3, [r7, #5]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <hal_gpio_configure_interrupt+0x68>
 8000896:	797b      	ldrb	r3, [r7, #5]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d109      	bne.n	80008b0 <hal_gpio_configure_interrupt+0x7c>
		EXTI->RTSR |= (1 << pin_no);
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	2101      	movs	r1, #1
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <hal_gpio_configure_interrupt+0x88>)
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6093      	str	r3, [r2, #8]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40013c00 	.word	0x40013c00

080008c0 <hal_gpio_enable_interrupt>:

void hal_gpio_enable_interrupt(uint16_t pin_no,IRQn_Type irq_no){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	80fb      	strh	r3, [r7, #6]
 80008cc:	4613      	mov	r3, r2
 80008ce:	717b      	strb	r3, [r7, #5]

	EXTI->IMR |= (1 << pin_no);
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <hal_gpio_enable_interrupt+0x38>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	88fa      	ldrh	r2, [r7, #6]
 80008d6:	2101      	movs	r1, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <hal_gpio_enable_interrupt+0x38>)
 80008e0:	430b      	orrs	r3, r1
 80008e2:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq_no);
 80008e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe99 	bl	8000620 <__NVIC_EnableIRQ>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40013c00 	.word	0x40013c00

080008fc <hal_gpio_clear_interrupt>:

void hal_gpio_clear_interrupt(uint16_t pin_no) {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
	if (EXTI->PR & (1 << pin_no))
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <hal_gpio_clear_interrupt+0x3c>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	88fa      	ldrh	r2, [r7, #6]
 800090c:	2101      	movs	r1, #1
 800090e:	fa01 f202 	lsl.w	r2, r1, r2
 8000912:	4013      	ands	r3, r2
 8000914:	2b00      	cmp	r3, #0
 8000916:	d009      	beq.n	800092c <hal_gpio_clear_interrupt+0x30>
		EXTI->PR |= (1 << pin_no);
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <hal_gpio_clear_interrupt+0x3c>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	88fa      	ldrh	r2, [r7, #6]
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <hal_gpio_clear_interrupt+0x3c>)
 8000928:	430b      	orrs	r3, r1
 800092a:	6153      	str	r3, [r2, #20]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40013c00 	.word	0x40013c00

0800093c <I2C_MasterTransmit_TXE>:
  * @brief  Handle TXE flag for Master
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_MasterTransmit_TXE(i2c_handle_t *hi2c) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	/* Write data to DR */
	hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	1c59      	adds	r1, r3, #1
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	611a      	str	r2, [r3, #16]
	hi2c->XferCount--;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	635a      	str	r2, [r3, #52]	; 0x34
	if (hi2c->XferCount == 0) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000964:	2b00      	cmp	r3, #0
 8000966:	d107      	bne.n	8000978 <I2C_MasterTransmit_TXE+0x3c>
		/* Disable BUF interrupt */
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	685a      	ldr	r2, [r3, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000976:	605a      	str	r2, [r3, #4]
	}
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <HAL_I2C_MemTxCpltCallback>:
  * @brief  Memory Tx Transfer completed callbacks.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
void HAL_I2C_MemTxCpltCallback(i2c_handle_t *hi2c) {
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <HAL_I2C_MasterTxCpltCallback>:
   * @brief  Master Tx Transfer completed callbacks.
   * @param  hi2c: pointer to a i2c_handle_t structure that contains
   *         the configuration information for I2C module
   * @retval None
   */
void HAL_I2C_MasterTxCpltCallback(i2c_handle_t *hi2c) {
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <HAL_I2C_MemRxCpltCallback>:
  * @brief  Memory Rx Transfer completed callbacks.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
void HAL_I2C_MemRxCpltCallback(i2c_handle_t *hi2c) {
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <HAL_I2C_SlaveRxCpltCallback>:
  * @brief  Slave Rx Transfer completed callbacks.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(i2c_handle_t *hi2c) {
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <HAL_I2C_SlaveTxCpltCallback>:
/** @brief  Slave Tx Transfer completed callbacks.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
void HAL_I2C_SlaveTxCpltCallback(i2c_handle_t *hi2c) {
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <HAL_I2C_MasterRxCpltCallback>:
  * @brief  Master Rx Transfer completed callbacks.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
void HAL_I2C_MasterRxCpltCallback(i2c_handle_t *hi2c) {
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <I2C_MasterTransmit_BTF>:
  * @brief  Handle BTF flag for Master transmitter
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval nope
  */
static void I2C_MasterTransmit_BTF(i2c_handle_t *hi2c) {
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount != 0) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00e      	beq.n	8000a1c <I2C_MasterTransmit_BTF+0x2e>
		/* Write data to DR */
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a02:	1c59      	adds	r1, r3, #1
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a14:	1e5a      	subs	r2, r3, #1
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	635a      	str	r2, [r3, #52]	; 0x34
		} else {
			hi2c->State = HAL_I2C_STATE_READY;
			HAL_I2C_MasterTxCpltCallback(hi2c); // For what purpose it here??  for callback something?
		}
	}
}
 8000a1a:	e033      	b.n	8000a84 <I2C_MasterTransmit_BTF+0x96>
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a2a:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a3a:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a4a:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR1 |= I2C_REG_CR1_STOP_GEN;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a5a:	601a      	str	r2, [r3, #0]
		if (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a62:	2b32      	cmp	r3, #50	; 0x32
 8000a64:	d107      	bne.n	8000a76 <I2C_MasterTransmit_BTF+0x88>
			hi2c->State = HAL_I2C_STATE_READY;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MemTxCpltCallback(hi2c);  // For what purpose it here??  for callback something?
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff ff87 	bl	8000982 <HAL_I2C_MemTxCpltCallback>
}
 8000a74:	e006      	b.n	8000a84 <I2C_MasterTransmit_BTF+0x96>
			hi2c->State = HAL_I2C_STATE_READY;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MasterTxCpltCallback(hi2c); // For what purpose it here??  for callback something?
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff88 	bl	8000994 <HAL_I2C_MasterTxCpltCallback>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <I2C_MasterReceive_BTF>:
  * @brief  Handle BTF flag for Master receiver
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval nope
  */
static void I2C_MasterReceive_BTF(i2c_handle_t *hi2c) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount == 3) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d117      	bne.n	8000acc <I2C_MasterReceive_BTF+0x40>
		/* Disable Acknowledge */
		hi2c->Instance->CR1 &= ~I2C_REG_CR1_ACK;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000aaa:	601a      	str	r2, [r3, #0]

		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6918      	ldr	r0, [r3, #16]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab6:	1c59      	adds	r1, r3, #1
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000abc:	b2c2      	uxtb	r2, r0
 8000abe:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
		hi2c->XferCount--;
	}
}
 8000aca:	e05d      	b.n	8000b88 <I2C_MasterReceive_BTF+0xfc>
	} else if (hi2c->XferCount == 2) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d14a      	bne.n	8000b6a <I2C_MasterReceive_BTF+0xde>
		hi2c->Instance->CR1 |= I2C_REG_CR1_STOP_GEN;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ae2:	601a      	str	r2, [r3, #0]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6918      	ldr	r0, [r3, #16]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aee:	1c59      	adds	r1, r3, #1
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000af4:	b2c2      	uxtb	r2, r0
 8000af6:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6918      	ldr	r0, [r3, #16]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0c:	1c59      	adds	r1, r3, #1
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000b12:	b2c2      	uxtb	r2, r0
 8000b14:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	1e5a      	subs	r2, r3, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	635a      	str	r2, [r3, #52]	; 0x34
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b2e:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b3e:	605a      	str	r2, [r3, #4]
		if (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX) {
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b46:	2b42      	cmp	r3, #66	; 0x42
 8000b48:	d107      	bne.n	8000b5a <I2C_MasterReceive_BTF+0xce>
			hi2c->State = HAL_I2C_STATE_READY;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MemRxCpltCallback(hi2c);  	//callback something if it need
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ff27 	bl	80009a6 <HAL_I2C_MemRxCpltCallback>
}
 8000b58:	e016      	b.n	8000b88 <I2C_MasterReceive_BTF+0xfc>
			hi2c->State = HAL_I2C_STATE_READY;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MasterRxCpltCallback(hi2c);	//callback something if it need
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff3a 	bl	80009dc <HAL_I2C_MasterRxCpltCallback>
}
 8000b68:	e00e      	b.n	8000b88 <I2C_MasterReceive_BTF+0xfc>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6918      	ldr	r0, [r3, #16]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b74:	1c59      	adds	r1, r3, #1
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000b7a:	b2c2      	uxtb	r2, r0
 8000b7c:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b82:	1e5a      	subs	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <I2C_Slave_ADDR>:
  * @brief  Handle ADD flag for Slave
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_Slave_ADDR(i2c_handle_t *hi2c){
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
  /* Clear ADDR flag */
    tmpreg = hi2c->Instance->SR1;  //read SR1
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	60fb      	str	r3, [r7, #12]
    tmpreg = hi2c->Instance->SR2;  //read SR2
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <hal_clear_stop_flag>:

void hal_clear_stop_flag(i2c_handle_t *hi2c) {
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	tmpreg = hi2c->Instance->SR1;      //reading from SR1
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	60fb      	str	r3, [r7, #12]
	hi2c->Instance->CR1 |= I2C_REG_CR1_ENABLE_I2C;  //writing to SR1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f042 0201 	orr.w	r2, r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
	UNUSED(tmpreg);
}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <I2C_Slave_STOPF>:
  * @brief  Handle STOPF flag for Slave
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_Slave_STOPF(i2c_handle_t *hi2c) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

	/* Disable EVT, BUF and ERR interrupt */
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bf2:	605a      	str	r2, [r3, #4]
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c02:	605a      	str	r2, [r3, #4]
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c12:	605a      	str	r2, [r3, #4]

	/* Clear STOPF flag */
	hal_clear_stop_flag(hi2c);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ffcc 	bl	8000bb2 <hal_clear_stop_flag>

	/* Disable Acknowledge */
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c28:	601a      	str	r2, [r3, #0]

	hi2c->State = HAL_I2C_STATE_READY;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	HAL_I2C_SlaveRxCpltCallback(hi2c);	//callback something if it need
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fec0 	bl	80009b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <I2C_Slave_AF>:
/**
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_Slave_AF(i2c_handle_t *hi2c) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	/* Disable EVT, BUF and ERR interrupt */
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c56:	605a      	str	r2, [r3, #4]
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c66:	605a      	str	r2, [r3, #4]
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c76:	605a      	str	r2, [r3, #4]

	/* Clear AF flag */
	hi2c->Instance->SR1 &= ~(I2C_REG_SR1_AF_FAILURE_FLAG);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c86:	615a      	str	r2, [r3, #20]

	/* Disable Acknowledge */
	hi2c->Instance->CR1 &= ~I2C_REG_CR1_ACK;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c96:	601a      	str	r2, [r3, #0]

	hi2c->State = HAL_I2C_STATE_READY;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff fe92 	bl	80009ca <HAL_I2C_SlaveTxCpltCallback>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <I2C_SlaveTransmit_TXE>:
  * @brief  Handle TXE flag for Slave
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_SlaveTransmit_TXE(i2c_handle_t *hi2c) {
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount != 0) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00d      	beq.n	8000cda <I2C_SlaveTransmit_TXE+0x2c>
		/* Write data to DR */
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc2:	1c59      	adds	r1, r3, #1
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd4:	1e5a      	subs	r2, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <I2C_SlaveTransmit_BTF>:
  * @brief  Handle BTF flag for Slave transmitter
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_SlaveTransmit_BTF(i2c_handle_t *hi2c) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount != 0) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00d      	beq.n	8000d10 <I2C_SlaveTransmit_BTF+0x2c>
		/* Write data to DR */
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	1c59      	adds	r1, r3, #1
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <I2C_MasterReceive_RXNE>:
  * @brief  Handle RXNE flag for Master
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_MasterReceive_RXNE(i2c_handle_t *hi2c) {
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]

	tmp = hi2c->XferCount;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2a:	60fb      	str	r3, [r7, #12]
	if (tmp > 3) {
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d90f      	bls.n	8000d52 <I2C_MasterReceive_RXNE+0x38>
		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6918      	ldr	r0, [r3, #16]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	1c59      	adds	r1, r3, #1
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000d42:	b2c2      	uxtb	r2, r0
 8000d44:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
			hi2c->State = HAL_I2C_STATE_READY;

			HAL_I2C_MasterRxCpltCallback(hi2c);
		}
	}
}
 8000d50:	e049      	b.n	8000de6 <I2C_MasterReceive_RXNE+0xcc>
	} else if ((tmp == 2) || (tmp == 3)) {
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d002      	beq.n	8000d5e <I2C_MasterReceive_RXNE+0x44>
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d108      	bne.n	8000d70 <I2C_MasterReceive_RXNE+0x56>
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d6c:	605a      	str	r2, [r3, #4]
}
 8000d6e:	e03a      	b.n	8000de6 <I2C_MasterReceive_RXNE+0xcc>
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d7e:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d8e:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d9e:	605a      	str	r2, [r3, #4]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6918      	ldr	r0, [r3, #16]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000daa:	1c59      	adds	r1, r3, #1
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000db0:	b2c2      	uxtb	r2, r0
 8000db2:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db8:	1e5a      	subs	r2, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
		if (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000dc4:	2b42      	cmp	r3, #66	; 0x42
 8000dc6:	d107      	bne.n	8000dd8 <I2C_MasterReceive_RXNE+0xbe>
			hi2c->State = HAL_I2C_STATE_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MemRxCpltCallback(hi2c);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fde8 	bl	80009a6 <HAL_I2C_MemRxCpltCallback>
}
 8000dd6:	e006      	b.n	8000de6 <I2C_MasterReceive_RXNE+0xcc>
			hi2c->State = HAL_I2C_STATE_READY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MasterRxCpltCallback(hi2c);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fdfb 	bl	80009dc <HAL_I2C_MasterRxCpltCallback>
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <I2C_SlaveReceive_BTF>:
  * @brief  Handle BTF flag for Slave receiver
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_SlaveReceive_BTF(i2c_handle_t *hi2c) {
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount != 0) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00e      	beq.n	8000e1c <I2C_SlaveReceive_BTF+0x2e>
		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6918      	ldr	r0, [r3, #16]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	1c59      	adds	r1, r3, #1
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000e0e:	b2c2      	uxtb	r2, r0
 8000e10:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <I2C_SlaveReceive_RXNE>:
  * @brief  Handle RXNE flag for Slave
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_SlaveReceive_RXNE(i2c_handle_t *hi2c) {
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount != 0) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00e      	beq.n	8000e54 <I2C_SlaveReceive_RXNE+0x2e>
		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6918      	ldr	r0, [r3, #16]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	1c59      	adds	r1, r3, #1
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000e46:	b2c2      	uxtb	r2, r0
 8000e48:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
	...

08000e60 <HAL_I2C_EV_IRQHandler>:
  * @brief  This function handles I2C event interrupt request.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
void HAL_I2C_EV_IRQHandler(i2c_handle_t *hi2c) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0, tmp4 = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
	/* Master mode selected */
	if ((hi2c->Instance->SR2 & I2C_REG_SR2_MSL_FLAG)) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d068      	beq.n	8000f58 <HAL_I2C_EV_IRQHandler+0xf8>
		/* I2C in mode Transmitter -----------------------------------------------*/
		if ((hi2c->Instance->SR2 & I2C_REG_SR2_TRA_FLAG)) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d030      	beq.n	8000ef6 <HAL_I2C_EV_IRQHandler+0x96>
			tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_TXE_FLAG);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9e:	617b      	str	r3, [r7, #20]
			tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_BUF_INT_ENABLE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eaa:	613b      	str	r3, [r7, #16]
			tmp3 = (hi2c->Instance->SR1 & I2C_REG_SR1_BTF_FLAG);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
			tmp4 = (hi2c->Instance->CR2 & I2C_REG_CR2_EVT_INT_ENABLE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ec2:	60bb      	str	r3, [r7, #8]
			/* TXE set and BTF reset -----------------------------------------------*/
			if (tmp1 && tmp2 && (!tmp3)) {
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d009      	beq.n	8000ede <HAL_I2C_EV_IRQHandler+0x7e>
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_I2C_EV_IRQHandler+0x7e>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <HAL_I2C_EV_IRQHandler+0x7e>
				I2C_MasterTransmit_TXE(hi2c);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fd30 	bl	800093c <I2C_MasterTransmit_TXE>
 8000edc:	e0ce      	b.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
			}
			/* BTF set -------------------------------------------------------------*/
			else if ((tmp3 && tmp4)) {
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 80cb 	beq.w	800107c <HAL_I2C_EV_IRQHandler+0x21c>
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80c7 	beq.w	800107c <HAL_I2C_EV_IRQHandler+0x21c>
				I2C_MasterTransmit_BTF(hi2c);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fd7d 	bl	80009ee <I2C_MasterTransmit_BTF>
			else if ((tmp3) && (tmp4)) {
				I2C_SlaveReceive_BTF(hi2c);
			}
		}
	}
}
 8000ef4:	e0c2      	b.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
			tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_RXNE_FLAG);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f00:	617b      	str	r3, [r7, #20]
			tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_BUF_INT_ENABLE);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f0c:	613b      	str	r3, [r7, #16]
			tmp3 = (hi2c->Instance->SR1 & I2C_REG_SR1_BTF_FLAG);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60fb      	str	r3, [r7, #12]
			tmp4 = (hi2c->Instance->CR2 & I2C_REG_CR2_EVT_INT_ENABLE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f24:	60bb      	str	r3, [r7, #8]
			if ((tmp1) && (tmp2) && (!tmp3)) {
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d009      	beq.n	8000f40 <HAL_I2C_EV_IRQHandler+0xe0>
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <HAL_I2C_EV_IRQHandler+0xe0>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <HAL_I2C_EV_IRQHandler+0xe0>
				I2C_MasterReceive_RXNE(hi2c);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff feee 	bl	8000d1a <I2C_MasterReceive_RXNE>
 8000f3e:	e09d      	b.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
			else if ((tmp3) && (tmp4)) {
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 809a 	beq.w	800107c <HAL_I2C_EV_IRQHandler+0x21c>
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8096 	beq.w	800107c <HAL_I2C_EV_IRQHandler+0x21c>
				I2C_MasterReceive_BTF(hi2c);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fd9b 	bl	8000a8c <I2C_MasterReceive_BTF>
}
 8000f56:	e091      	b.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
		tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_ADDR_FLAG);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	617b      	str	r3, [r7, #20]
		tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_EVT_INT_ENABLE);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f6e:	613b      	str	r3, [r7, #16]
		tmp3 = (hi2c->Instance->SR1 & I2C_REG_SR1_STOP_DETECTION_FLAG);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	60fb      	str	r3, [r7, #12]
		tmp4 = (hi2c->Instance->SR2 & I2C_REG_SR2_TRA_FLAG);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60bb      	str	r3, [r7, #8]
		if ((tmp1) && (tmp2)) {
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_I2C_EV_IRQHandler+0x146>
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d008      	beq.n	8000fa6 <HAL_I2C_EV_IRQHandler+0x146>
			hal_gpio_write_to_pin(GPIOC, LED_BLUE, 1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2107      	movs	r1, #7
 8000f98:	483a      	ldr	r0, [pc, #232]	; (8001084 <HAL_I2C_EV_IRQHandler+0x224>)
 8000f9a:	f7ff fbfa 	bl	8000792 <hal_gpio_write_to_pin>
			I2C_Slave_ADDR(hi2c);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fdf6 	bl	8000b90 <I2C_Slave_ADDR>
 8000fa4:	e06a      	b.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
		else if ((tmp3) && (tmp2)) {
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d006      	beq.n	8000fba <HAL_I2C_EV_IRQHandler+0x15a>
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_I2C_EV_IRQHandler+0x15a>
			I2C_Slave_STOPF(hi2c);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fe12 	bl	8000bdc <I2C_Slave_STOPF>
 8000fb8:	e060      	b.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
		else if (tmp4) {
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d02e      	beq.n	800101e <HAL_I2C_EV_IRQHandler+0x1be>
			tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_TXE_FLAG);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	617b      	str	r3, [r7, #20]
			tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_BUF_INT_ENABLE);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd6:	613b      	str	r3, [r7, #16]
			tmp3 = (hi2c->Instance->SR1 & I2C_REG_SR1_BTF_FLAG);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60fb      	str	r3, [r7, #12]
			tmp4 = (hi2c->Instance->CR2 & I2C_REG_CR2_EVT_INT_ENABLE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fee:	60bb      	str	r3, [r7, #8]
			if ((tmp1) && (tmp2) && (!tmp3)) {
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <HAL_I2C_EV_IRQHandler+0x1aa>
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_I2C_EV_IRQHandler+0x1aa>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d103      	bne.n	800100a <HAL_I2C_EV_IRQHandler+0x1aa>
				I2C_SlaveTransmit_TXE(hi2c);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fe53 	bl	8000cae <I2C_SlaveTransmit_TXE>
 8001008:	e038      	b.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
			else if ((tmp3) && (tmp4)) {
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d035      	beq.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d032      	beq.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
				I2C_SlaveTransmit_BTF(hi2c);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fe64 	bl	8000ce4 <I2C_SlaveTransmit_BTF>
}
 800101c:	e02e      	b.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
			tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_RXNE_FLAG);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001028:	617b      	str	r3, [r7, #20]
			tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_BUF_INT_ENABLE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001034:	613b      	str	r3, [r7, #16]
			tmp3 = (hi2c->Instance->SR1 & I2C_REG_SR1_BTF_FLAG);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60fb      	str	r3, [r7, #12]
			tmp4 = (hi2c->Instance->CR2 & I2C_REG_CR2_EVT_INT_ENABLE);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800104c:	60bb      	str	r3, [r7, #8]
			if ((tmp1) && (tmp2) && (!tmp3)) {
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d009      	beq.n	8001068 <HAL_I2C_EV_IRQHandler+0x208>
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_I2C_EV_IRQHandler+0x208>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d103      	bne.n	8001068 <HAL_I2C_EV_IRQHandler+0x208>
				I2C_SlaveReceive_RXNE(hi2c);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fee0 	bl	8000e26 <I2C_SlaveReceive_RXNE>
 8001066:	e009      	b.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
			else if ((tmp3) && (tmp4)) {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
				I2C_SlaveReceive_BTF(hi2c);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff feba 	bl	8000dee <I2C_SlaveReceive_BTF>
}
 800107a:	e7ff      	b.n	800107c <HAL_I2C_EV_IRQHandler+0x21c>
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40020800 	.word	0x40020800

08001088 <HAL_I2C_ErrorCallback>:
  * @param  I2cHandle: I2C handle
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(i2c_handle_t *I2cHandle){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	  while(1)
	  {
		  if(hal_gpio_read_from_pin(GPIOI,LED_RED)){
 8001090:	2109      	movs	r1, #9
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <HAL_I2C_ErrorCallback+0x30>)
 8001094:	f7ff fb69 	bl	800076a <hal_gpio_read_from_pin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_I2C_ErrorCallback+0x22>
			  hal_gpio_write_to_pin(GPIOI,LED_RED, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	2109      	movs	r1, #9
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_I2C_ErrorCallback+0x30>)
 80010a4:	f7ff fb75 	bl	8000792 <hal_gpio_write_to_pin>
 80010a8:	e7f2      	b.n	8001090 <HAL_I2C_ErrorCallback+0x8>
		  }else{
			  hal_gpio_write_to_pin(GPIOI,LED_RED, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2109      	movs	r1, #9
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <HAL_I2C_ErrorCallback+0x30>)
 80010b0:	f7ff fb6f 	bl	8000792 <hal_gpio_write_to_pin>
		  if(hal_gpio_read_from_pin(GPIOI,LED_RED)){
 80010b4:	e7ec      	b.n	8001090 <HAL_I2C_ErrorCallback+0x8>
 80010b6:	bf00      	nop
 80010b8:	40022000 	.word	0x40022000

080010bc <HAL_I2C_ER_IRQHandler>:
  * @brief  This function handles I2C error interrupt request.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
void HAL_I2C_ER_IRQHandler(i2c_handle_t *hi2c) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
	tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_BUS_ERROR_FLAG);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	617b      	str	r3, [r7, #20]
	tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_ERR_INT_ENABLE);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e6:	613b      	str	r3, [r7, #16]
	/* I2C Bus error interrupt occurred ----------------------------------------*/
	if ((tmp1) && (tmp2)) {
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d010      	beq.n	8001110 <HAL_I2C_ER_IRQHandler+0x54>
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00d      	beq.n	8001110 <HAL_I2C_ER_IRQHandler+0x54>
		hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Clear BERR flag */
		hi2c->Instance->SR1 &= ~(I2C_REG_SR1_BUS_ERROR_FLAG);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800110e:	615a      	str	r2, [r3, #20]
	}

	tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_ARLO_FLAG);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800111a:	617b      	str	r3, [r7, #20]
	tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_ERR_INT_ENABLE);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	613b      	str	r3, [r7, #16]
	/* I2C Arbitration Loss error interrupt occurred ---------------------------*/
	if ((tmp1) && (tmp2)) {
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d010      	beq.n	8001150 <HAL_I2C_ER_IRQHandler+0x94>
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00d      	beq.n	8001150 <HAL_I2C_ER_IRQHandler+0x94>
		hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001138:	f043 0202 	orr.w	r2, r3, #2
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Clear ARLO flag */
		hi2c->Instance->SR1 &= ~(I2C_REG_SR1_ARLO_FLAG);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	695a      	ldr	r2, [r3, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800114e:	615a      	str	r2, [r3, #20]
	}

	tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_AF_FAILURE_FLAG);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115a:	617b      	str	r3, [r7, #20]
	tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_ERR_INT_ENABLE);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001166:	613b      	str	r3, [r7, #16]
	/* I2C Acknowledge failure error interrupt occurred ------------------------*/
	if ((tmp1) && (tmp2)) {
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d02a      	beq.n	80011c4 <HAL_I2C_ER_IRQHandler+0x108>
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d027      	beq.n	80011c4 <HAL_I2C_ER_IRQHandler+0x108>
		tmp1 = (hi2c->Instance->SR2 & I2C_REG_SR2_MSL_FLAG);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	617b      	str	r3, [r7, #20]
		tmp2 = hi2c->XferCount;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001184:	613b      	str	r3, [r7, #16]
		tmp3 = hi2c->State;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800118c:	60fb      	str	r3, [r7, #12]
		if ((!tmp1) && (tmp2 == 0) && (tmp3 == HAL_I2C_STATE_BUSY_TX)) {
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <HAL_I2C_ER_IRQHandler+0xec>
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d106      	bne.n	80011a8 <HAL_I2C_ER_IRQHandler+0xec>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b12      	cmp	r3, #18
 800119e:	d103      	bne.n	80011a8 <HAL_I2C_ER_IRQHandler+0xec>
			I2C_Slave_AF(hi2c);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff fd4d 	bl	8000c40 <I2C_Slave_AF>
 80011a6:	e00d      	b.n	80011c4 <HAL_I2C_ER_IRQHandler+0x108>
		} else {
			hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	f043 0204 	orr.w	r2, r3, #4
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	63da      	str	r2, [r3, #60]	; 0x3c
			/* Clear AF flag */
			hi2c->Instance->SR1 &= ~(I2C_REG_SR1_AF_FAILURE_FLAG);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011c2:	615a      	str	r2, [r3, #20]
		}
	}

	tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_OVR_FLAG);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ce:	617b      	str	r3, [r7, #20]
	tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_ERR_INT_ENABLE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	613b      	str	r3, [r7, #16]
	/* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
	if ((tmp1) && (tmp2)) {
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d010      	beq.n	8001204 <HAL_I2C_ER_IRQHandler+0x148>
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00d      	beq.n	8001204 <HAL_I2C_ER_IRQHandler+0x148>
		hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ec:	f043 0208 	orr.w	r2, r3, #8
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	63da      	str	r2, [r3, #60]	; 0x3c
		/* Clear OVR flag */
		hi2c->Instance->SR1 &= ~(I2C_REG_SR1_OVR_FLAG);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001202:	615a      	str	r2, [r3, #20]
	}

	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00e      	beq.n	800122a <HAL_I2C_ER_IRQHandler+0x16e>
		hi2c->State = HAL_I2C_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
		hi2c->Instance->CR1 &= ~I2C_REG_CR1_POS;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001222:	601a      	str	r2, [r3, #0]

		HAL_I2C_ErrorCallback(hi2c);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff2f 	bl	8001088 <HAL_I2C_ErrorCallback>
	}
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <hal_i2c_enable_peripheral>:
/*                                                                            */
/*                      Driver exposed APIs                                   */
/*                                                                            */
/******************************************************************************/

void hal_i2c_enable_peripheral(I2C_TypeDef *i2cx) {
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
	i2cx->CR1 |= I2C_REG_CR1_ENABLE_I2C;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f043 0201 	orr.w	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <hal_i2c_set_own_address1>:

static void hal_i2c_disable_peripheral(I2C_TypeDef *i2cx) {
	i2cx->CR1 &= ~I2C_REG_CR1_ENABLE_I2C;
}

static void hal_i2c_set_own_address1(I2C_TypeDef *i2cx, uint32_t own_address) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	i2cx->OAR1 &= ~(0x7f << 1);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	609a      	str	r2, [r3, #8]
	i2cx->OAR1 |= (own_address << 1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <hal_i2c_manage_clock_stretch>:

static void hal_i2c_manage_clock_stretch(I2C_TypeDef *i2cx, uint32_t no_stretch) {
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
	if (no_stretch) {
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d006      	beq.n	800129c <hal_i2c_manage_clock_stretch+0x1e>
		i2cx->CR1 |= I2C_REG_CR1_NOSTRETCH;  // disabled clock stretching
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	601a      	str	r2, [r3, #0]
	} else {
		i2cx->CR1 &= ~I2C_REG_CR1_NOSTRETCH;
	}
}
 800129a:	e005      	b.n	80012a8 <hal_i2c_manage_clock_stretch+0x2a>
		i2cx->CR1 &= ~I2C_REG_CR1_NOSTRETCH;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	601a      	str	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <hal_i2c_configure_ccr>:

static void hal_i2c_configure_ccr(I2C_TypeDef *i2cx, uint32_t pclk, uint32_t clkspeed,
		uint32_t duty_cycle) {
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	603b      	str	r3, [r7, #0]

	double Thigh, Tlow, Tpclk;
	uint32_t ccr;
	if (clkspeed <= 100000) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <hal_i2c_configure_ccr+0x7c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d809      	bhi.n	80012de <hal_i2c_configure_ccr+0x2a>
		/* configure ccr for standard mode */
		ccr = (pclk * 1000000) / (clkspeed << 1);
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <hal_i2c_configure_ccr+0x80>)
 80012ce:	fb02 f203 	mul.w	r2, r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e01d      	b.n	800131a <hal_i2c_configure_ccr+0x66>
	} else {
		if (duty_cycle == I2C_FM_DUTY_2) {
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10a      	bne.n	80012fa <hal_i2c_configure_ccr+0x46>
			ccr = (pclk * 1000000) / (3 * clkspeed);
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <hal_i2c_configure_ccr+0x80>)
 80012e8:	fb02 f103 	mul.w	r1, r2, r3
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f8:	617b      	str	r3, [r7, #20]
		}
		if (duty_cycle == I2C_FM_DUTY_16BY9) {
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10c      	bne.n	800131a <hal_i2c_configure_ccr+0x66>
			/* this is to reach 400khz in fm mode */
			ccr = (pclk * 1000000) / (25 * clkspeed);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <hal_i2c_configure_ccr+0x80>)
 8001304:	fb02 f103 	mul.w	r1, r2, r3
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	fbb1 f3f3 	udiv	r3, r1, r3
 8001318:	617b      	str	r3, [r7, #20]
		}
	}
	i2cx->CCR |= ccr;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	69da      	ldr	r2, [r3, #28]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	431a      	orrs	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	61da      	str	r2, [r3, #28]
}
 8001326:	bf00      	nop
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	000186a0 	.word	0x000186a0
 8001334:	000f4240 	.word	0x000f4240

08001338 <hal_i2c_rise_time_configuration>:

static void hal_i2c_rise_time_configuration(I2C_TypeDef *i2cx, uint32_t freqrange,
		uint32_t ClockSpeed) {
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	//  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
	uint32_t trise;
	if (ClockSpeed <= 100000) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a11      	ldr	r2, [pc, #68]	; (800138c <hal_i2c_rise_time_configuration+0x54>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d803      	bhi.n	8001354 <hal_i2c_rise_time_configuration+0x1c>
		trise = freqrange + 1;
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e00a      	b.n	800136a <hal_i2c_rise_time_configuration+0x32>
	} else {
		trise = (((freqrange * 300) / 1000) + 1);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <hal_i2c_rise_time_configuration+0x58>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
	}
	i2cx->TRISE &= ~(0x3F);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	621a      	str	r2, [r3, #32]
	i2cx->TRISE |= trise;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	431a      	orrs	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	621a      	str	r2, [r3, #32]
}
 8001382:	bf00      	nop
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	000186a0 	.word	0x000186a0
 8001390:	10624dd3 	.word	0x10624dd3

08001394 <hal_i2c_clk_init>:

static void hal_i2c_clk_init(I2C_TypeDef *i2cx, uint32_t clkspeed, uint32_t duty_cycle) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
	uint32_t pclk = I2C_PERIPHERAL_CLK_FREQ_10MHZ;
 80013a0:	230a      	movs	r3, #10
 80013a2:	617b      	str	r3, [r7, #20]
	i2cx->CR2 &= ~(0x3F);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	605a      	str	r2, [r3, #4]
	i2cx->CR2 |= (0x3F & pclk);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013ba:	431a      	orrs	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	605a      	str	r2, [r3, #4]
	hal_i2c_rise_time_configuration(i2cx, pclk, clkspeed);
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	6979      	ldr	r1, [r7, #20]
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff ffb7 	bl	8001338 <hal_i2c_rise_time_configuration>
	hal_i2c_configure_ccr(i2cx, pclk, clkspeed, duty_cycle);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	6979      	ldr	r1, [r7, #20]
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff ff6f 	bl	80012b4 <hal_i2c_configure_ccr>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <hal_i2c_set_addressing_mode>:

static void hal_i2c_set_addressing_mode(I2C_TypeDef *i2cx, uint32_t adr_mode) {
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
	if (adr_mode == I2C_ADDRMODE_10BI)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d106      	bne.n	80013fc <hal_i2c_set_addressing_mode+0x1e>
		i2cx->OAR1 |= I2C_REG_OAR1_ADDRMODE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	609a      	str	r2, [r3, #8]
	else
		i2cx->OAR1 &= ~I2C_REG_OAR1_ADDRMODE;
}
 80013fa:	e005      	b.n	8001408 <hal_i2c_set_addressing_mode+0x2a>
		i2cx->OAR1 &= ~I2C_REG_OAR1_ADDRMODE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <hal_i2c_manage_ack>:
	} else {
		i2cx->CCR &= ~I2C_REG_CCR_DUTY;
	}
}

void hal_i2c_manage_ack(I2C_TypeDef *i2cx, uint32_t ack_noack) {
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
	if (ack_noack == I2C_ACK_ENABLE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d106      	bne.n	8001430 <hal_i2c_manage_ack+0x1e>
		i2cx->CR1 |= I2C_REG_CR1_ACK;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
	else
		i2cx->CR1 &= ~I2C_REG_CR1_ACK;
}
 800142e:	e005      	b.n	800143c <hal_i2c_manage_ack+0x2a>
		i2cx->CR1 &= ~I2C_REG_CR1_ACK;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <hal_i2c_generate_start_condition>:

static void hal_i2c_generate_start_condition(I2C_TypeDef *i2cx) {
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	i2cx->CR1 |= I2C_REG_CR1_START_GEN;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <hal_i2c_configure_tx_rx_interrupt>:

static void hal_i2c_generate_stop_condition(I2C_TypeDef *i2cx) {
	i2cx->CR1 |= I2C_REG_CR1_STOP_GEN;
}

static void hal_i2c_configure_tx_rx_interrupt(I2C_TypeDef *i2cx, uint32_t val) {
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	if (val)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <hal_i2c_configure_tx_rx_interrupt+0x1e>
		i2cx->CR2 |= I2C_REG_CR2_BUF_INT_ENABLE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	605a      	str	r2, [r3, #4]
	else
		i2cx->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
}
 8001480:	e005      	b.n	800148e <hal_i2c_configure_tx_rx_interrupt+0x2a>
		i2cx->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	605a      	str	r2, [r3, #4]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <hal_i2c_configure_error_interrupt>:

static void hal_i2c_configure_error_interrupt(I2C_TypeDef *i2cx, uint32_t val) {
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	if (val)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <hal_i2c_configure_error_interrupt+0x1e>
		i2cx->CR2 |= I2C_REG_CR2_ERR_INT_ENABLE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	605a      	str	r2, [r3, #4]
	else
		i2cx->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
}
 80014b4:	e005      	b.n	80014c2 <hal_i2c_configure_error_interrupt+0x2a>
		i2cx->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	605a      	str	r2, [r3, #4]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <hal_i2c_configure_evt_interrupt>:

static void hal_i2c_configure_evt_interrupt(I2C_TypeDef *i2cx, uint32_t val) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	if (val)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d006      	beq.n	80014ea <hal_i2c_configure_evt_interrupt+0x1e>
		i2cx->CR2 |= I2C_REG_CR2_EVT_INT_ENABLE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	605a      	str	r2, [r3, #4]
	else
		i2cx->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
}
 80014e8:	e005      	b.n	80014f6 <hal_i2c_configure_evt_interrupt+0x2a>
		i2cx->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	605a      	str	r2, [r3, #4]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <i2c_bus_busy>:

static uint8_t i2c_bus_busy(I2C_TypeDef *i2cx) {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	if (i2cx->SR2 & I2C_REG_SR2_BUS_BUSY_FLAG)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <i2c_bus_busy+0x18>
		return 1;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <i2c_bus_busy+0x1a>
	else
		return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <i2c_wait_untill_sb_set>:


/*
 * @brief wait for start condition
 */
static uint8_t i2c_wait_untill_sb_set(I2C_TypeDef *i2cx) {
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if (i2cx->SR1 & I2C_REG_SR1_SB_FLAG) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <i2c_wait_untill_sb_set+0x18>
		return 1;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <i2c_wait_untill_sb_set+0x1a>
	}
	return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <i2c_wait_untill_addr_set>:

static uint8_t i2c_wait_untill_addr_set(I2C_TypeDef *i2cx) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.

	if (i2cx->SR1 & I2C_REG_SR1_ADDR_SENT_FLAG) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <i2c_wait_untill_addr_set+0x18>
		return 1;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <i2c_wait_untill_addr_set+0x1a>
	}
	return 0;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <hal_i2c_init>:
/*
 *  @brief Initialize the given I2C
 *  @param *handle : Handle to the I2C Peripheral, which the application wants to initialize
 *  @retval None
 */
void hal_i2c_init(i2c_handle_t *handle) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	hal_i2c_clk_init(handle->Instance, handle->Init.ClockSpeed,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	461a      	mov	r2, r3
 8001582:	f7ff ff07 	bl	8001394 <hal_i2c_clk_init>
			handle->Init.DutyCycle);

	hal_i2c_set_addressing_mode(handle->Instance, handle->Init.AddressingMode);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	4619      	mov	r1, r3
 8001590:	4610      	mov	r0, r2
 8001592:	f7ff ff24 	bl	80013de <hal_i2c_set_addressing_mode>

	hal_i2c_manage_ack(handle->Instance, handle->Init.ack_enable);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	4610      	mov	r0, r2
 80015a2:	f7ff ff36 	bl	8001412 <hal_i2c_manage_ack>

	hal_i2c_manage_clock_stretch(handle->Instance, handle->Init.NoStretchMode);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4610      	mov	r0, r2
 80015b2:	f7ff fe64 	bl	800127e <hal_i2c_manage_clock_stretch>

	hal_i2c_set_own_address1(handle->Instance, handle->Init.OwnAddress1);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f7ff fe45 	bl	8001250 <hal_i2c_set_own_address1>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <hal_i2c_send_addr_first>:

void hal_i2c_send_addr_first(I2C_TypeDef *i2cx, uint8_t address) {
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	70fb      	strb	r3, [r7, #3]

	i2cx->DR = address;
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	611a      	str	r2, [r3, #16]

}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <clear_addr_flag>:

void clear_addr_flag(I2C_TypeDef *i2cx) {
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	uint16_t val;

	val = i2cx->SR1;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	81fb      	strh	r3, [r7, #14]
	val = i2cx->SR2;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	81fb      	strh	r3, [r7, #14]

	UNUSED(val);  // prevent compiler warning
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <hal_i2c_master_tx>:
 *  @param  *buffer : pointer to tx buffer
 *  @param  len : len of the data to be TX in bait
 *  @retval None
 */
void hal_i2c_master_tx(i2c_handle_t *handle, uint8_t slave_address,
		uint8_t *buffer, uint32_t len) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	460b      	mov	r3, r1
 8001616:	72fb      	strb	r3, [r7, #11]

	handle->pBuffPtr = buffer;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
	handle->XferCount = len;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	635a      	str	r2, [r3, #52]	; 0x34
	handle->XferSize = len;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	631a      	str	r2, [r3, #48]	; 0x30
	handle->State = HAL_I2C_STATE_BUSY_TX;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2212      	movs	r2, #18
 800162e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	hal_i2c_enable_peripheral(handle->Instance);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fdfb 	bl	8001232 <hal_i2c_enable_peripheral>

	/* doesnt care for PE = 0 */
	while (i2c_bus_busy(handle->Instance))
 800163c:	bf00      	nop
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff5c 	bl	8001500 <i2c_bus_busy>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f7      	bne.n	800163e <hal_i2c_master_tx+0x36>
		; //need to include timeout

	/* Disable Pos FEDOR: IS THIS really needed ??*/
	handle->Instance->CR1 &= ~I2C_CR1_POS;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165c:	601a      	str	r2, [r3, #0]

	hal_i2c_generate_start_condition(handle->Instance);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff feef 	bl	8001446 <hal_i2c_generate_start_condition>

	/* wait till sb is set */

	while (!i2c_wait_untill_sb_set(handle->Instance))
 8001668:	bf00      	nop
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff ff58 	bl	8001524 <i2c_wait_untill_sb_set>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f7      	beq.n	800166a <hal_i2c_master_tx+0x62>
		;

	//clear_sb_flag(); ???

	hal_i2c_send_addr_first(handle->Instance, slave_address);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	7afa      	ldrb	r2, [r7, #11]
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ffa3 	bl	80015ce <hal_i2c_send_addr_first>

	while (!i2c_wait_untill_addr_set(handle->Instance))
 8001688:	bf00      	nop
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff5a 	bl	8001548 <i2c_wait_untill_addr_set>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f7      	beq.n	800168a <hal_i2c_master_tx+0x82>
		;

	clear_addr_flag(handle->Instance); // IS THIS really needed ?? FEDOR: Yes it need. It clear ADDR flag in SR1
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ffa3 	bl	80015ea <clear_addr_flag>

	/* enable the buff, err , event interrupts */
	hal_i2c_configure_tx_rx_interrupt(handle->Instance, 1);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff feda 	bl	8001464 <hal_i2c_configure_tx_rx_interrupt>
	hal_i2c_configure_error_interrupt(handle->Instance, 1);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff feee 	bl	8001498 <hal_i2c_configure_error_interrupt>
	hal_i2c_configure_evt_interrupt(handle->Instance, 1);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2101      	movs	r1, #1
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff02 	bl	80014cc <hal_i2c_configure_evt_interrupt>
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <hal_i2c_master_rx>:
 *  @param  *buffer : pointer to Rx buffer
 *  @param  len : len of the data to be Rx in bait
 *  @retval None
 */
void hal_i2c_master_rx(i2c_handle_t *handle, uint8_t slave_addr,
		uint8_t *buffer, uint32_t len) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	460b      	mov	r3, r1
 80016de:	72fb      	strb	r3, [r7, #11]

	handle->pBuffPtr = buffer;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
	handle->XferCount = len;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
	handle->XferSize = len;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
	handle->State = HAL_I2C_STATE_BUSY_RX;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2222      	movs	r2, #34	; 0x22
 80016f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	hal_i2c_enable_peripheral(handle->Instance);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fd97 	bl	8001232 <hal_i2c_enable_peripheral>

	while (i2c_bus_busy(handle->Instance))
 8001704:	bf00      	nop
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fef8 	bl	8001500 <i2c_bus_busy>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f7      	bne.n	8001706 <hal_i2c_master_rx+0x36>
		;

	handle->Instance->CR1 &= ~I2C_CR1_POS;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001724:	601a      	str	r2, [r3, #0]

	handle->Instance->CR1 |= I2C_CR1_ACK;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001734:	601a      	str	r2, [r3, #0]

	hal_i2c_generate_start_condition(handle->Instance);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fe83 	bl	8001446 <hal_i2c_generate_start_condition>

	/* wait till sb is set */

	while (!i2c_wait_untill_sb_set(handle->Instance))
 8001740:	bf00      	nop
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff feec 	bl	8001524 <i2c_wait_untill_sb_set>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f7      	beq.n	8001742 <hal_i2c_master_rx+0x72>
		;

	//clear_sb_flag(); ???

	hal_i2c_send_addr_first(handle->Instance, slave_addr);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	7afa      	ldrb	r2, [r7, #11]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff37 	bl	80015ce <hal_i2c_send_addr_first>

	while (!i2c_wait_untill_addr_set(handle->Instance))
 8001760:	bf00      	nop
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff feee 	bl	8001548 <i2c_wait_untill_addr_set>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f7      	beq.n	8001762 <hal_i2c_master_rx+0x92>
		;

	clear_addr_flag(handle->Instance); // IS THIS really needed ?? FEDOR: Yes it need. It clear ADDR flag in SR1
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff37 	bl	80015ea <clear_addr_flag>

	/* Enable the buff, err , event interrupts */
	hal_i2c_configure_tx_rx_interrupt(handle->Instance, 1);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fe6e 	bl	8001464 <hal_i2c_configure_tx_rx_interrupt>
	hal_i2c_configure_error_interrupt(handle->Instance, 1);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2101      	movs	r1, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fe82 	bl	8001498 <hal_i2c_configure_error_interrupt>
	hal_i2c_configure_evt_interrupt(handle->Instance, 1);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fe96 	bl	80014cc <hal_i2c_configure_evt_interrupt>
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <__NVIC_EnableIRQ>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4906      	ldr	r1, [pc, #24]	; (80017dc <__NVIC_EnableIRQ+0x34>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <main>:


int main(void)


{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	uint8_t addcm[CMD_LENGTH];
	uint8_t ack_buf[2];

#endif

	spi_gpio_init();
 80017e4:	f000 f998 	bl	8001b18 <spi_gpio_init>
	i2c_gpio_init();
 80017e8:	f000 f914 	bl	8001a14 <i2c_gpio_init>
	led_init();					// configure LED
 80017ec:	f000 f944 	bl	8001a78 <led_init>

	button_init();				/* Configure USER Button as ext interrupt throw EXTI15 */
 80017f0:	f000 f9d4 	bl	8001b9c <button_init>
	 ******************************************************************************
	 	 	 	 	 	 	 	 		SPI CONFIG
	 ******************************************************************************
	  */

	_HAL_RCC_SPI2_CLK_ENABLE();
 80017f4:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <main+0x1d4>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	4a6e      	ldr	r2, [pc, #440]	; (80019b4 <main+0x1d4>)
 80017fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fe:	6413      	str	r3, [r2, #64]	; 0x40

	/*fill up the SPI handle structure */
	SpiHandle.Instance = SPI_2;
 8001800:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <main+0x1d8>)
 8001802:	4a6e      	ldr	r2, [pc, #440]	; (80019bc <main+0x1dc>)
 8001804:	601a      	str	r2, [r3, #0]

	SpiHandle.Init.BaudRatePrescaler = SPI_REG_CR1_BR_PCLK_DIV_32;
 8001806:	4b6c      	ldr	r3, [pc, #432]	; (80019b8 <main+0x1d8>)
 8001808:	2220      	movs	r2, #32
 800180a:	61da      	str	r2, [r3, #28]
	SpiHandle.Init.Direction         = SPI_ENABLE_2_LINE_UNI_DIR;
 800180c:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <main+0x1d8>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
	SpiHandle.Init.CLKPhase          = SPI_SECOND_CLOCK_TRANS;
 8001812:	4b69      	ldr	r3, [pc, #420]	; (80019b8 <main+0x1d8>)
 8001814:	2201      	movs	r2, #1
 8001816:	615a      	str	r2, [r3, #20]
	SpiHandle.Init.CLKPolarity       = SPI_CPOL_LOW;
 8001818:	4b67      	ldr	r3, [pc, #412]	; (80019b8 <main+0x1d8>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
	SpiHandle.Init.DataSize          = SPI_8BIT_DF_ENABLE;
 800181e:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <main+0x1d8>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
	SpiHandle.Init.FirstBit          = SPI_MSB_FIRST;
 8001824:	4b64      	ldr	r3, [pc, #400]	; (80019b8 <main+0x1d8>)
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
	SpiHandle.Init.NSS               = SPI_SSM_ENABLE;
 800182a:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <main+0x1d8>)
 800182c:	2201      	movs	r2, #1
 800182e:	619a      	str	r2, [r3, #24]
	SpiHandle.Init.Mode              = SPI_MASTER_MODE_SEL;
 8001830:	4b61      	ldr	r3, [pc, #388]	; (80019b8 <main+0x1d8>)
 8001832:	2201      	movs	r2, #1
 8001834:	605a      	str	r2, [r3, #4]

	SpiHandle.State = HAL_SPI_STATE_READY;
 8001836:	4b60      	ldr	r3, [pc, #384]	; (80019b8 <main+0x1d8>)
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Call driver API to initialize the SPI device */
	hal_spi_init(&SpiHandle);
 800183e:	485e      	ldr	r0, [pc, #376]	; (80019b8 <main+0x1d8>)
 8001840:	f7fe fdbb 	bl	80003ba <hal_spi_init>

	/* Enable the IRQs in the NVIC */
	NVIC_EnableIRQ(SPI2_IRQn);
 8001844:	2024      	movs	r0, #36	; 0x24
 8001846:	f7ff ffaf 	bl	80017a8 <__NVIC_EnableIRQ>
	/**
	 ******************************************************************************
	 	 	 	 	 	 	 	 	 I2C CONFIG
	 ******************************************************************************
	 */
	_HAL_RCC_I2C2_CLK_ENABLE();
 800184a:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <main+0x1d4>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a59      	ldr	r2, [pc, #356]	; (80019b4 <main+0x1d4>)
 8001850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
	i2c_handle.Instance = I2C_2;        // base address in memory
 8001856:	4b5a      	ldr	r3, [pc, #360]	; (80019c0 <main+0x1e0>)
 8001858:	4a5a      	ldr	r2, [pc, #360]	; (80019c4 <main+0x1e4>)
 800185a:	601a      	str	r2, [r3, #0]
	i2c_handle.Init.ack_enable = I2C_ACK_ENABLE;
 800185c:	4b58      	ldr	r3, [pc, #352]	; (80019c0 <main+0x1e0>)
 800185e:	2201      	movs	r2, #1
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
	i2c_handle.Init.AddressingMode = I2C_ADDRMODE_7BIT;
 8001862:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <main+0x1e0>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
	i2c_handle.Init.ClockSpeed = 100000;
 8001868:	4b55      	ldr	r3, [pc, #340]	; (80019c0 <main+0x1e0>)
 800186a:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <main+0x1e8>)
 800186c:	605a      	str	r2, [r3, #4]
	i2c_handle.Init.DutyCycle = I2C_FM_DUTY_2; //care needs to taken
 800186e:	4b54      	ldr	r3, [pc, #336]	; (80019c0 <main+0x1e0>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
	i2c_handle.Init.GeneralCallMode = 0;
 8001874:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <main+0x1e0>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
	i2c_handle.Init.NoStretchMode = I2C_ENABLE_CLK_STRETCH;
 800187a:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <main+0x1e0>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
	i2c_handle.Init.OwnAddress1 = SLAVE_OWN_ADDRESS;
 8001880:	4b4f      	ldr	r3, [pc, #316]	; (80019c0 <main+0x1e0>)
 8001882:	2253      	movs	r2, #83	; 0x53
 8001884:	60da      	str	r2, [r3, #12]

	NVIC_EnableIRQ(I2Cx_ER_IRQn);
 8001886:	2022      	movs	r0, #34	; 0x22
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(I2Cx_EV_IRQn);
 800188c:	2021      	movs	r0, #33	; 0x21
 800188e:	f7ff ff8b 	bl	80017a8 <__NVIC_EnableIRQ>

	hal_i2c_init(&i2c_handle);
 8001892:	484b      	ldr	r0, [pc, #300]	; (80019c0 <main+0x1e0>)
 8001894:	f7ff fe6a 	bl	800156c <hal_i2c_init>
	hal_i2c_enable_peripheral(i2c_handle.Instance);  // It need for something. I think 2IC enable occur in TX/RX function
 8001898:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <main+0x1e0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fcc8 	bl	8001232 <hal_i2c_enable_peripheral>

	//hal_gpio_enable_interrupt(0);

	//val = i2c_handle.Instance->CR1;
	i2c_handle.State = HAL_I2C_STATE_READY;
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <main+0x1e0>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	/******************************************************************************/



	/* Wait for user Button press before starting the communication. Toggles LED_ORANGE until then */
	while (TestReady != SET) {
 80018aa:	e005      	b.n	80018b8 <main+0xd8>
		led_toggle(GPIOI, LED_RED);
 80018ac:	2109      	movs	r1, #9
 80018ae:	4847      	ldr	r0, [pc, #284]	; (80019cc <main+0x1ec>)
 80018b0:	f000 f912 	bl	8001ad8 <led_toggle>
		//LED3 (orange)
		delay_gen();
 80018b4:	f000 f89a 	bl	80019ec <delay_gen>
	while (TestReady != SET) {
 80018b8:	4b45      	ldr	r3, [pc, #276]	; (80019d0 <main+0x1f0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d1f5      	bne.n	80018ac <main+0xcc>
	}
	hal_gpio_write_to_pin(GPIOI, LED_RED, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2109      	movs	r1, #9
 80018c4:	4841      	ldr	r0, [pc, #260]	; (80019cc <main+0x1ec>)
 80018c6:	f7fe ff64 	bl	8000792 <hal_gpio_write_to_pin>

	while (1) {
#ifdef I2C_TEST
		while (i2c_handle.State != HAL_I2C_STATE_READY)
 80018ca:	bf00      	nop
 80018cc:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <main+0x1e0>)
 80018ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d1fa      	bne.n	80018cc <main+0xec>
#ifdef I2C_MASTER_MODE_EN // code for MASTER implementation

		/*						Write to the slave						*/

		/* first send the master write cmd to slave */
		master_write_req = MASTER_WRITE_CMD;
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <main+0x1f4>)
 80018d8:	22c1      	movs	r2, #193	; 0xc1
 80018da:	701a      	strb	r2, [r3, #0]
		hal_i2c_master_tx(&i2c_handle, SLAVE_ADDRESS_WRITE,
 80018dc:	2301      	movs	r3, #1
 80018de:	4a3d      	ldr	r2, [pc, #244]	; (80019d4 <main+0x1f4>)
 80018e0:	21a6      	movs	r1, #166	; 0xa6
 80018e2:	4837      	ldr	r0, [pc, #220]	; (80019c0 <main+0x1e0>)
 80018e4:	f7ff fe90 	bl	8001608 <hal_i2c_master_tx>
				(uint8_t*) &master_write_req, 1);
		while (i2c_handle.State != HAL_I2C_STATE_READY)
 80018e8:	bf00      	nop
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <main+0x1e0>)
 80018ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d1fa      	bne.n	80018ea <main+0x10a>
			; // application can block here, or you can put here some useful task

		master_write_req = WRITE_LEN;
 80018f4:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <main+0x1f4>)
 80018f6:	2205      	movs	r2, #5
 80018f8:	701a      	strb	r2, [r3, #0]
		/* Now send the number of bytes to be written */
		hal_i2c_master_tx(&i2c_handle, SLAVE_ADDRESS_WRITE,
 80018fa:	2301      	movs	r3, #1
 80018fc:	4a35      	ldr	r2, [pc, #212]	; (80019d4 <main+0x1f4>)
 80018fe:	21a6      	movs	r1, #166	; 0xa6
 8001900:	482f      	ldr	r0, [pc, #188]	; (80019c0 <main+0x1e0>)
 8001902:	f7ff fe81 	bl	8001608 <hal_i2c_master_tx>
				(uint8_t*) &master_write_req, 1);

		while (i2c_handle.State != HAL_I2C_STATE_READY)
 8001906:	bf00      	nop
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <main+0x1e0>)
 800190a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800190e:	2b01      	cmp	r3, #1
 8001910:	d1fa      	bne.n	8001908 <main+0x128>
			; // application can block here, or you can put here some useful task

		/* NOW send the data stream */
		hal_i2c_master_tx(&i2c_handle, SLAVE_ADDRESS_WRITE, master_tx_buffer,
 8001912:	2305      	movs	r3, #5
 8001914:	4a30      	ldr	r2, [pc, #192]	; (80019d8 <main+0x1f8>)
 8001916:	21a6      	movs	r1, #166	; 0xa6
 8001918:	4829      	ldr	r0, [pc, #164]	; (80019c0 <main+0x1e0>)
 800191a:	f7ff fe75 	bl	8001608 <hal_i2c_master_tx>
				WRITE_LEN);

		while (i2c_handle.State != HAL_I2C_STATE_READY)
 800191e:	bf00      	nop
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <main+0x1e0>)
 8001922:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001926:	2b01      	cmp	r3, #1
 8001928:	d1fa      	bne.n	8001920 <main+0x140>

		/*						Read from the slave						*/


		/* first send the master read cmd to slave */
		master_read_req = MASTER_READ_CMD;
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <main+0x1fc>)
 800192c:	22c2      	movs	r2, #194	; 0xc2
 800192e:	701a      	strb	r2, [r3, #0]
		hal_i2c_master_tx(&i2c_handle, SLAVE_ADDRESS_WRITE,
 8001930:	2301      	movs	r3, #1
 8001932:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <main+0x1fc>)
 8001934:	21a6      	movs	r1, #166	; 0xa6
 8001936:	4822      	ldr	r0, [pc, #136]	; (80019c0 <main+0x1e0>)
 8001938:	f7ff fe66 	bl	8001608 <hal_i2c_master_tx>
				(uint8_t*) &master_read_req, 1);
		while (i2c_handle.State != HAL_I2C_STATE_READY)
 800193c:	bf00      	nop
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <main+0x1e0>)
 8001940:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001944:	2b01      	cmp	r3, #1
 8001946:	d1fa      	bne.n	800193e <main+0x15e>
			; // application can block here, or you can put here some useful task

		master_read_req = READ_LEN;
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <main+0x1fc>)
 800194a:	2205      	movs	r2, #5
 800194c:	701a      	strb	r2, [r3, #0]
		/* Now send the number of bytes to be read */
		hal_i2c_master_tx(&i2c_handle, SLAVE_ADDRESS_WRITE,
 800194e:	2301      	movs	r3, #1
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <main+0x1fc>)
 8001952:	21a6      	movs	r1, #166	; 0xa6
 8001954:	481a      	ldr	r0, [pc, #104]	; (80019c0 <main+0x1e0>)
 8001956:	f7ff fe57 	bl	8001608 <hal_i2c_master_tx>
				(uint8_t*) &master_read_req, 1);

		while (i2c_handle.State != HAL_I2C_STATE_READY)
 800195a:	bf00      	nop
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <main+0x1e0>)
 800195e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001962:	2b01      	cmp	r3, #1
 8001964:	d1fa      	bne.n	800195c <main+0x17c>
			; // application can block here, or you can put here some useful task

		memset(master_rx_buffer, 0, 5); // reset RX buffer
 8001966:	2205      	movs	r2, #5
 8001968:	2100      	movs	r1, #0
 800196a:	481d      	ldr	r0, [pc, #116]	; (80019e0 <main+0x200>)
 800196c:	f000 f9ec 	bl	8001d48 <memset>
		/* NOW read the data stream */
		hal_i2c_master_rx(&i2c_handle, SLAVE_ADDRESS_READ, master_rx_buffer,
 8001970:	2305      	movs	r3, #5
 8001972:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <main+0x200>)
 8001974:	21a7      	movs	r1, #167	; 0xa7
 8001976:	4812      	ldr	r0, [pc, #72]	; (80019c0 <main+0x1e0>)
 8001978:	f7ff feaa 	bl	80016d0 <hal_i2c_master_rx>
				READ_LEN);
		while (i2c_handle.State != HAL_I2C_STATE_READY)
 800197c:	bf00      	nop
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <main+0x1e0>)
 8001980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001984:	2b01      	cmp	r3, #1
 8001986:	d1fa      	bne.n	800197e <main+0x19e>
			; // application can block here, or you can put here some useful task

		if (Buffercmp(slave_tx_buffer, master_rx_buffer, READ_LEN)) {
 8001988:	2205      	movs	r2, #5
 800198a:	4915      	ldr	r1, [pc, #84]	; (80019e0 <main+0x200>)
 800198c:	4815      	ldr	r0, [pc, #84]	; (80019e4 <main+0x204>)
 800198e:	f000 f941 	bl	8001c14 <Buffercmp>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <main+0x1c4>
			hal_gpio_write_to_pin(GPIOI, LED_RED, 1);
 8001998:	2201      	movs	r2, #1
 800199a:	2109      	movs	r1, #9
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <main+0x1ec>)
 800199e:	f7fe fef8 	bl	8000792 <hal_gpio_write_to_pin>
 80019a2:	e003      	b.n	80019ac <main+0x1cc>
		} else
			led_toggle(GPIOC, LED_BLUE);
 80019a4:	2107      	movs	r1, #7
 80019a6:	4810      	ldr	r0, [pc, #64]	; (80019e8 <main+0x208>)
 80019a8:	f000 f896 	bl	8001ad8 <led_toggle>


		delay_gen();
 80019ac:	f000 f81e 	bl	80019ec <delay_gen>
		while (i2c_handle.State != HAL_I2C_STATE_READY)
 80019b0:	e78b      	b.n	80018ca <main+0xea>
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	20000088 	.word	0x20000088
 80019bc:	40003800 	.word	0x40003800
 80019c0:	20000034 	.word	0x20000034
 80019c4:	40005800 	.word	0x40005800
 80019c8:	000186a0 	.word	0x000186a0
 80019cc:	40022000 	.word	0x40022000
 80019d0:	2000002c 	.word	0x2000002c
 80019d4:	20000030 	.word	0x20000030
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000079 	.word	0x20000079
 80019e0:	20000074 	.word	0x20000074
 80019e4:	20000008 	.word	0x20000008
 80019e8:	40020800 	.word	0x40020800

080019ec <delay_gen>:
#endif
	}
}


void delay_gen(void) {;
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
	uint32_t cnt = 800000;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <delay_gen+0x24>)
 80019f4:	607b      	str	r3, [r7, #4]
	while (cnt--)
 80019f6:	bf00      	nop
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1fa      	bne.n	80019f8 <delay_gen+0xc>
		;
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	000c3500 	.word	0x000c3500

08001a14 <i2c_gpio_init>:

void i2c_gpio_init(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
	gpio_pin_conf_t i2c_pin;

	_HAL_RCC_GPIOF_CLK_ENABLE();
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <i2c_gpio_init+0x5c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <i2c_gpio_init+0x5c>)
 8001a20:	f043 0320 	orr.w	r3, r3, #32
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30

	i2c_pin.pin = I2C1_SCL_LINE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	603b      	str	r3, [r7, #0]
	i2c_pin.mode = GPIO_PIN_ALT_FUN_MODE;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	607b      	str	r3, [r7, #4]
	i2c_pin.op_type = GPIO_PIN_OP_TYPE_OPENDRAIN;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
	i2c_pin.pull = GPIO_PIN_PULL_UP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
	i2c_pin.speed = GPIO_PIN_SPEED_HIGH;
 8001a36:	2302      	movs	r3, #2
 8001a38:	613b      	str	r3, [r7, #16]

	hal_gpio_set_alt_function(GPIOF, I2C1_SCL_LINE, GPIO_PIN_AF4_I2C123);
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	480d      	ldr	r0, [pc, #52]	; (8001a74 <i2c_gpio_init+0x60>)
 8001a40:	f7fe fe6c 	bl	800071c <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOF, &i2c_pin);
 8001a44:	463b      	mov	r3, r7
 8001a46:	4619      	mov	r1, r3
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <i2c_gpio_init+0x60>)
 8001a4a:	f7fe fec6 	bl	80007da <hal_gpio_init>

	i2c_pin.pin = I2C1_SDA_LINE;	// need change only pin number another have got same configuration
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]

	hal_gpio_set_alt_function(GPIOF, I2C1_SDA_LINE, GPIO_PIN_AF4_I2C123);
 8001a52:	2204      	movs	r2, #4
 8001a54:	2100      	movs	r1, #0
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <i2c_gpio_init+0x60>)
 8001a58:	f7fe fe60 	bl	800071c <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOF, &i2c_pin);
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <i2c_gpio_init+0x60>)
 8001a62:	f7fe feba 	bl	80007da <hal_gpio_init>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40021400 	.word	0x40021400

08001a78 <led_init>:


void led_init(void){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOI_CLK_ENABLE();
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <led_init+0x54>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <led_init+0x54>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf.pin = LED_RED;
 8001a8a:	2309      	movs	r3, #9
 8001a8c:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_OUTPUT_MODE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
	hal_gpio_init(GPIOI,&gpio_pin_conf);
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <led_init+0x58>)
 8001aa4:	f7fe fe99 	bl	80007da <hal_gpio_init>

	_HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <led_init+0x54>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <led_init+0x54>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf.pin = LED_BLUE;
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	603b      	str	r3, [r7, #0]
	hal_gpio_init(GPIOC, &gpio_pin_conf);
 8001ab8:	463b      	mov	r3, r7
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <led_init+0x5c>)
 8001abe:	f7fe fe8c 	bl	80007da <hal_gpio_init>

}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40020800 	.word	0x40020800

08001ad8 <led_toggle>:

void led_toggle(GPIO_TypeDef *GPIOx, uint16_t pin) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
	if (hal_gpio_read_from_pin(GPIOx, pin))
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7fe fe3e 	bl	800076a <hal_gpio_read_from_pin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <led_toggle+0x2a>
		hal_gpio_write_to_pin(GPIOx, pin, 0);
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	2200      	movs	r2, #0
 8001af8:	4619      	mov	r1, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7fe fe49 	bl	8000792 <hal_gpio_write_to_pin>
	else
		hal_gpio_write_to_pin(GPIOx, pin, 1);
}
 8001b00:	e005      	b.n	8001b0e <led_toggle+0x36>
		hal_gpio_write_to_pin(GPIOx, pin, 1);
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4619      	mov	r1, r3
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7fe fe42 	bl	8000792 <hal_gpio_write_to_pin>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <spi_gpio_init>:

void spi_gpio_init(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOI_CLK_ENABLE();
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <spi_gpio_init+0x7c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <spi_gpio_init+0x7c>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30

	/* configure GPIOI_PIN_1 for SPI CLK functionality */
	gpio_pin_conf.pin = SPI_CLK_PIN;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_ALT_FUN_MODE;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_PUSH_DOWN;
 8001b36:	2302      	movs	r3, #2
 8001b38:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	613b      	str	r3, [r7, #16]

	hal_gpio_set_alt_function(GPIOI, SPI_CLK_PIN, GPIO_PIN_AF5_SPI2);
 8001b3e:	2205      	movs	r2, #5
 8001b40:	2101      	movs	r1, #1
 8001b42:	4815      	ldr	r0, [pc, #84]	; (8001b98 <spi_gpio_init+0x80>)
 8001b44:	f7fe fdea 	bl	800071c <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOI,&gpio_pin_conf);
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4812      	ldr	r0, [pc, #72]	; (8001b98 <spi_gpio_init+0x80>)
 8001b4e:	f7fe fe44 	bl	80007da <hal_gpio_init>

	/* configure GPIOI_PIN_2 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MISO_PIN;
 8001b52:	2302      	movs	r3, #2
 8001b54:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOI, SPI_MISO_PIN, GPIO_PIN_AF5_SPI2);
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	480e      	ldr	r0, [pc, #56]	; (8001b98 <spi_gpio_init+0x80>)
 8001b60:	f7fe fddc 	bl	800071c <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOI, &gpio_pin_conf);
 8001b64:	463b      	mov	r3, r7
 8001b66:	4619      	mov	r1, r3
 8001b68:	480b      	ldr	r0, [pc, #44]	; (8001b98 <spi_gpio_init+0x80>)
 8001b6a:	f7fe fe36 	bl	80007da <hal_gpio_init>

	/* configure GPIOI_PIN_3 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MOSI_PIN;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOI, SPI_MOSI_PIN, GPIO_PIN_AF5_SPI2);
 8001b76:	2205      	movs	r2, #5
 8001b78:	2103      	movs	r1, #3
 8001b7a:	4807      	ldr	r0, [pc, #28]	; (8001b98 <spi_gpio_init+0x80>)
 8001b7c:	f7fe fdce 	bl	800071c <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOI, &gpio_pin_conf);
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <spi_gpio_init+0x80>)
 8001b86:	f7fe fe28 	bl	80007da <hal_gpio_init>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40022000 	.word	0x40022000

08001b9c <button_init>:
		led_toggle(GPIOI, LED_RED);
		delay_gen();
	}
}

void button_init(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
	_HAL_RCC_GPIOG_CLK_ENABLE();
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <button_init+0x6c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <button_init+0x6c>)
 8001ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30

	gpio_pin_conf_t gpio_pin_conf;
	gpio_pin_conf.pin = GPIO_BUTTON_PIN;
 8001bae:	230f      	movs	r3, #15
 8001bb0:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_INPUT_MODE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	613b      	str	r3, [r7, #16]
	hal_gpio_init(GPIO_BUTTON_PORT, &gpio_pin_conf);
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4811      	ldr	r0, [pc, #68]	; (8001c0c <button_init+0x70>)
 8001bc8:	f7fe fe07 	bl	80007da <hal_gpio_init>

	RCC->APB2ENR |= (1 << 14);
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <button_init+0x6c>)
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <button_init+0x6c>)
 8001bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd6:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[3] &= (0b1111 << 12);
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <button_init+0x74>)
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <button_init+0x74>)
 8001bde:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001be2:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= (0b0110 << 12);
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <button_init+0x74>)
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <button_init+0x74>)
 8001bea:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001bee:	6153      	str	r3, [r2, #20]
	hal_gpio_configure_interrupt(GPIO_BUTTON_PIN, INT_FALLING_EDGE);
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	200f      	movs	r0, #15
 8001bf4:	f7fe fe1e 	bl	8000834 <hal_gpio_configure_interrupt>
	hal_gpio_enable_interrupt(GPIO_BUTTON_PIN, EXTI15_10_IRQn);
 8001bf8:	2128      	movs	r1, #40	; 0x28
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f7fe fe60 	bl	80008c0 <hal_gpio_enable_interrupt>
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40021800 	.word	0x40021800
 8001c10:	40013800 	.word	0x40013800

08001c14 <Buffercmp>:

static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8001c22:	e00d      	b.n	8001c40 <Buffercmp+0x2c>
  {
    if((*pBuffer1) != *pBuffer2)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <Buffercmp+0x20>
    {
      return BufferLength;
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	e00b      	b.n	8001c4c <Buffercmp+0x38>
    }
    pBuffer1++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3301      	adds	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	1e5a      	subs	r2, r3, #1
 8001c44:	80fa      	strh	r2, [r7, #6]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ec      	bne.n	8001c24 <Buffercmp+0x10>
  }
	return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
	...

08001c58 <EXTI15_10_IRQHandler>:
/*
 * @brief  brief  This function handles EXTI15-10 interrupt request.
 * @param  none
 * @retval none
 */
void EXTI15_10_IRQHandler(void){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	hal_gpio_clear_interrupt(GPIO_BUTTON_PIN);
 8001c5c:	200f      	movs	r0, #15
 8001c5e:	f7fe fe4d 	bl	80008fc <hal_gpio_clear_interrupt>
	TestReady = SET;
 8001c62:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <EXTI15_10_IRQHandler+0x14>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000002c 	.word	0x2000002c

08001c70 <I2C2_EV_IRQHandler>:
/*
 * @brief  This function handles I2C event interrupt request.
 * @param  none
 * @retval none
 */
void I2C2_EV_IRQHandler(void){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(& i2c_handle);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <I2C2_EV_IRQHandler+0x10>)
 8001c76:	f7ff f8f3 	bl	8000e60 <HAL_I2C_EV_IRQHandler>
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000034 	.word	0x20000034

08001c84 <I2C2_ER_IRQHandler>:
/*
 * @brief  This function handles I2C error interrupt request.
 * @param  none
 * @retval none
 */
void I2C2_ER_IRQHandler(void){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(& i2c_handle);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <I2C2_ER_IRQHandler+0x10>)
 8001c8a:	f7ff fa17 	bl	80010bc <HAL_I2C_ER_IRQHandler>
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000034 	.word	0x20000034

08001c98 <SPI2_IRQHandler>:
/*
 * @brief  This function handles SPI2 interrupt request.
 * @param  none
 * @retval none
 */
void SPI2_IRQHandler(void) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	hal_spi_irq_handler(&SpiHandle);	/* call the driver api to process this interrupt (thanks cap!=))*/
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <SPI2_IRQHandler+0x10>)
 8001c9e:	f7fe fc87 	bl	80005b0 <hal_spi_irq_handler>
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000088 	.word	0x20000088

08001cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001cb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	; (8001cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <LoopForever+0xe>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	; (8001cf8 <LoopForever+0x16>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cda:	f000 f811 	bl	8001d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cde:	f7ff fd7f 	bl	80017e0 <main>

08001ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce2:	e7fe      	b.n	8001ce2 <LoopForever>
  ldr   r0, =_estack
 8001ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001cf0:	08001d78 	.word	0x08001d78
  ldr r2, =_sbss
 8001cf4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001cf8:	200000c4 	.word	0x200000c4

08001cfc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC_IRQHandler>
	...

08001d00 <__libc_init_array>:
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	2600      	movs	r6, #0
 8001d04:	4d0c      	ldr	r5, [pc, #48]	; (8001d38 <__libc_init_array+0x38>)
 8001d06:	4c0d      	ldr	r4, [pc, #52]	; (8001d3c <__libc_init_array+0x3c>)
 8001d08:	1b64      	subs	r4, r4, r5
 8001d0a:	10a4      	asrs	r4, r4, #2
 8001d0c:	42a6      	cmp	r6, r4
 8001d0e:	d109      	bne.n	8001d24 <__libc_init_array+0x24>
 8001d10:	f000 f822 	bl	8001d58 <_init>
 8001d14:	2600      	movs	r6, #0
 8001d16:	4d0a      	ldr	r5, [pc, #40]	; (8001d40 <__libc_init_array+0x40>)
 8001d18:	4c0a      	ldr	r4, [pc, #40]	; (8001d44 <__libc_init_array+0x44>)
 8001d1a:	1b64      	subs	r4, r4, r5
 8001d1c:	10a4      	asrs	r4, r4, #2
 8001d1e:	42a6      	cmp	r6, r4
 8001d20:	d105      	bne.n	8001d2e <__libc_init_array+0x2e>
 8001d22:	bd70      	pop	{r4, r5, r6, pc}
 8001d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d28:	4798      	blx	r3
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	e7ee      	b.n	8001d0c <__libc_init_array+0xc>
 8001d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d32:	4798      	blx	r3
 8001d34:	3601      	adds	r6, #1
 8001d36:	e7f2      	b.n	8001d1e <__libc_init_array+0x1e>
 8001d38:	08001d70 	.word	0x08001d70
 8001d3c:	08001d70 	.word	0x08001d70
 8001d40:	08001d70 	.word	0x08001d70
 8001d44:	08001d74 	.word	0x08001d74

08001d48 <memset>:
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4402      	add	r2, r0
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d100      	bne.n	8001d52 <memset+0xa>
 8001d50:	4770      	bx	lr
 8001d52:	f803 1b01 	strb.w	r1, [r3], #1
 8001d56:	e7f9      	b.n	8001d4c <memset+0x4>

08001d58 <_init>:
 8001d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5a:	bf00      	nop
 8001d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d5e:	bc08      	pop	{r3}
 8001d60:	469e      	mov	lr, r3
 8001d62:	4770      	bx	lr

08001d64 <_fini>:
 8001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d66:	bf00      	nop
 8001d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6a:	bc08      	pop	{r3}
 8001d6c:	469e      	mov	lr, r3
 8001d6e:	4770      	bx	lr
